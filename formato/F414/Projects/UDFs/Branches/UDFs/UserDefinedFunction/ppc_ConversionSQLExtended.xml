<object stamp="c6af7401-97f9-4f60-8616-6c843098e9b6_1626895213388" type="UserDefinedFunction" version="2.0">
    <property name="objectId" value="fb0aab5d-e00e-4820-af53-32f62e176afe" valueType="string"/>
    <property name="branchId" value="UDFs" valueType="string"/>
    <property name="name" value="ppc_ConversionSQLExtended" valueType="string"/>
    <property name="description" value="2021.02.14" valueType="string"/>
    <property name="arguments" valueType="table">
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CSQLE_task" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CSQLE_branchId" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CSQLE_textSQL" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
    </property>
    <property name="body" valueType="object">
        <object type="ASLExpression" version="1.0">
            <property name="expression" valueType="table">
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="&lt;!--&#xa;Copyright by AXIOM SL, Igor Kirilyuk&#xa;Version of 2021.02.14&#xa;Convert SQL query.&#xa;Input variables:&#xa;CSQLE_task - system variable &quot;task&quot;&#xa;CSQLE_branchId - branch identifier&#xa;CSQLE_textSQL - text SQL query&#xa;-->&#xa;trace(&quot;#!#!#! ppc_ConversionSQLExtended. Started #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_ConversionSQLExtended. Copyright by AXIOM SL, Igor Kirilyuk, 2021.02.14 #!#!#!&quot;);&#xa;&#xa;var CSQLE_startDate = new(&quot;java.util.Date&quot;);&#xa;&#xa;var CSQLE_userInstanceKeys = &quot;&quot;;&#xa;var CSQLE_userStreamKeys = &quot;&quot;;&#xa;var CSQLE_branch = CSQLE_branchId;&#xa;var CSQLE_SQL = CSQLE_textSQL;&#xa;&#xa;&lt;if> !CSQLE_SQL.isEmpty()&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;&lt;!-- Get count DataSource name -->&#xa;&#x9;&#x9;var CSQLE_countDataSource = 0;&#xa;&#x9;&#x9;var CSQLE_Matcher = class(&quot;java.util.regex.Pattern&quot;).compile(&quot;%%(.*?)%%&quot;).matcher(CSQLE_SQL);&#xa;&#x9;&#x9;&lt;for>  &lt;comma/> CSQLE_Matcher.find() &lt;comma/> &#xa;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;CSQLE_countDataSource = CSQLE_countDataSource + if(CSQLE_Matcher.group().toUpperCase().indexOf(&quot;WHERE&quot;) &amp;gt;= 0, 0, 1);&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;var CSQLE_indexPattern = 1;&#x9;&#x9;&#xa;&#x9;&#x9;CSQLE_Matcher.reset();&#xa;&#x9;&#x9;&lt;for>  &lt;comma/> CSQLE_Matcher.find() &lt;comma/> &#xa;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_aliaseTable = &quot;&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_Group = CSQLE_Matcher.group().replace(&quot;%%&quot;, &quot;&quot;).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> (CSQLE_Group.toUpperCase().indexOf(&quot;WHERE&quot;) &amp;gt;= 0)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_Matcher_sectionWHERE = class(&quot;java.util.regex.Pattern&quot;).compile(&quot;%%WHERE&quot; + CSQLE_indexPattern + &quot;(.*?)%%&quot;).matcher(CSQLE_SQL);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_aliaseTable = if(CSQLE_Matcher_sectionWHERE.find() and CSQLE_Matcher_sectionWHERE.group().split(&quot;:&quot;).size() &amp;gt;= 2, CSQLE_Matcher_sectionWHERE.group().replace(&quot;%%&quot;, &quot;&quot;).split(&quot;:&quot;).get(1).trim(), CSQLE_aliaseTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_Pattern_InstanceKeyValue = class(&quot;java.util.regex.Pattern&quot;).compile(&quot;\((.*?)\)&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_Matcher_InstanceKeyValue = CSQLE_Pattern_InstanceKeyValue.matcher(CSQLE_Group);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;for>  &lt;comma/> CSQLE_Matcher_InstanceKeyValue.find() &lt;comma/> &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_userInstanceKeys = CSQLE_Matcher_InstanceKeyValue.group().replace(&quot;(&quot;, &quot;&quot;).replace(&quot;)&quot;, &quot;&quot;).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_Group = CSQLE_Group.replace(CSQLE_Matcher_InstanceKeyValue.group(), &quot;&quot;).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_Pattern_StreamKeyValue = class(&quot;java.util.regex.Pattern&quot;).compile(&quot;\{(.*?)\}&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_Matcher_StreamKeyValue = CSQLE_Pattern_StreamKeyValue.matcher(CSQLE_Group);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;for>  &lt;comma/> CSQLE_Matcher_StreamKeyValue.find() &lt;comma/> &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_userStreamKeys = CSQLE_Matcher_StreamKeyValue.group().replace(&quot;{&quot;, &quot;&quot;).replace(&quot;}&quot;, &quot;&quot;).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_Group = CSQLE_Group.replace(CSQLE_Matcher_StreamKeyValue.group(), &quot;&quot;).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_dependencies = &quot;&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_PBN = CSQLE_Group.split(&quot;:&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_PBN.size() == 2&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_PBN.get(0).indexOf(&quot;!&quot;) &amp;gt;= 0&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_branch = axiomObjectManager.locate(ObjectID.createNameId(&quot;Branch&quot;, null, CSQLE_PBN.get(0)), axiomEnvironment).getId();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ConversionSQLExtended. Get &quot; + CSQLE_PBN.get(0) + &quot; branch ID - &quot; + CSQLE_branch);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_objectDependencies = axiomObjectManager.locate(ObjectID.createId(&quot;Branch&quot;, null, CSQLE_branch), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> axiomObjectManager.locate(ObjectID.createId(&quot;BranchDependencies&quot;, CSQLE_objectDependencies.getId(), &quot;BranchDependencies&quot;), axiomEnvironment.setOneProperty(class(&quot;com.axiomsl.framework.api.server.FrameworkAxiomEnvironmentConstants&quot;).ALLOW_LOCATE_INVALID, true)).propertyIsSet(&quot;dependencies&quot;) &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_tableDependencies = axiomObjectManager.locate(ObjectID.createId(&quot;BranchDependencies&quot;, CSQLE_objectDependencies.getId(), &quot;BranchDependencies&quot;), axiomEnvironment.setOneProperty(class(&quot;com.axiomsl.framework.api.server.FrameworkAxiomEnvironmentConstants&quot;).ALLOW_LOCATE_INVALID, true)).getTable(&quot;dependencies&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var index = 0 &lt;comma/> index &amp;lt; CSQLE_tableDependencies.size() &lt;comma/> index++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_PBN.get(0).equals(CSQLE_tableDependencies.get(index).getProperty(&quot;name&quot;))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_dependencies = CSQLE_tableDependencies.get(index).getProperty(&quot;name&quot;) + &quot;:&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_tableDependencies.get(index).propertyIsSet(&quot;branchExpression&quot;) and (!&quot;&quot;.equals(CSQLE_tableDependencies.get(index).getProperty(&quot;branchExpression&quot;)))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_TimeTag = CreateTimeTag(CSQLE_task.getAsOfDate());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_instanceKeys = CSQLE_TimeTag.createTablePropertyValue();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_TimeTag.setProperty(&quot;instanceKeyValues&quot;, CSQLE_instanceKeys);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_task.getTaskProps().propertyIsSet(&quot;instanceKeyValues&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexKeyValues = 0 &lt;comma/> indexKeyValues &amp;lt; CSQLE_task.getTaskProps().getTable(&quot;instanceKeyValues&quot;).size() &lt;comma/> indexKeyValues++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_InstanceKeyValues = CSQLE_instanceKeys.addRow(&quot;InstanceKeyValue&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_InstanceKeyValues.setProperty(&quot;name&quot;, CSQLE_task.getTaskProps().getTable(&quot;instanceKeyValues&quot;).get(indexKeyValues).getString(&quot;name&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_InstanceKeyValues.setProperty(&quot;keyValueType&quot;, CSQLE_task.getTaskProps().getTable(&quot;instanceKeyValues&quot;).get(indexKeyValues).getString(&quot;keyValueType&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_InstanceKeyValues.setProperty(&quot;keyValue&quot;, CSQLE_task.getTaskProps().getTable(&quot;instanceKeyValues&quot;).get(indexKeyValues).getString(&quot;keyValue&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_ProjectBranchName = axiomObjectManager.getResolver().getName(axiomObjectManager.getResolver().resolve(ObjectID.createId(&quot;Branch&quot;, null, CSQLE_task.getBranchId())));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_branch = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["glbl_s91_resolveSoftReference"{706bd8c0-bd0f-4e43-8a18-d53018266a82}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CSQLE_ProjectBranchName, CSQLE_tableDependencies.get(index).getProperty(&quot;name&quot;), CSQLE_TimeTag);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ConversionSQLExtended. Get &quot; + CSQLE_tableDependencies.get(index).getReference(&quot;branch&quot;).getTargetObjectName() + &quot; (alias &quot; + CSQLE_tableDependencies.get(index).getProperty(&quot;name&quot;) + &quot;)&quot; + &quot; soft-dependency branch ID - &quot; + CSQLE_branch);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_branchDependenies = CSQLE_tableDependencies.get(index).getReference(&quot;branch&quot;).getTargetObjectName();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_branch = if(CSQLE_branchDependenies.indexOf(&quot;!&quot;) &amp;gt; 0, axiomObjectManager.locate(ObjectID.createNameId(&quot;Branch&quot;, null, CSQLE_branchDependenies), axiomEnvironment).getId(), CSQLE_branch);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ConversionSQLExtended. Get &quot; + CSQLE_tableDependencies.get(index).getReference(&quot;branch&quot;).getTargetObjectName() + &quot; (alias &quot; + CSQLE_tableDependencies.get(index).getProperty(&quot;name&quot;) + &quot;)&quot; + &quot; dependency branch ID - &quot; + CSQLE_branch);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ConversionSQLExtended. Dependencies is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_dataSourceName = if(CSQLE_PBN.size() == 2, CSQLE_PBN.get(1), CSQLE_PBN.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_dataSource = axiomObjectManager.locate(ObjectID.createNameId(&quot;DataSource&quot;, CSQLE_branch, CSQLE_dataSourceName), axiomEnvironment).cloneObject();&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_dataModel = axiomObjectManager.locate(ObjectID.createNameId(&quot;DataModel&quot;, CSQLE_branch, CSQLE_dataSourceName.replace(&quot;FreeFormReport-format&quot;, &quot;FreeFormReport&quot;).replace(&quot;FreeFormReport-data&quot;, &quot;FreeFormReport&quot;)), axiomEnvironment).cloneObject();&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_TimeTag = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CreateTimeTag"{9c2de6a2-eae6-4547-90ae-26c306e36c77}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CSQLE_task, CSQLE_dataSource, CSQLE_userInstanceKeys, if(CSQLE_PBN.size() == 2, CSQLE_PBN.get(0) + &quot;:&quot;, &quot;&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_ProjectBranchName = axiomObjectManager.getResolver().getName(axiomObjectManager.getResolver().resolve(ObjectID.createId(&quot;Branch&quot;, null, CSQLE_branch)));&#xa;&#x9;&#x9;&#x9;&#x9;&lt;!--CSQLE_SQL = CSQLE_SQL.replace(CSQLE_Matcher.group(), sourceTable(CSQLE_ProjectBranchName + &quot;:&quot; + CSQLE_dataSourceName, CSQLE_TimeTag));&#x9;-->&#xa;&#x9;&#x9;&#x9;&#x9;CSQLE_SQL = CSQLE_SQL.replace(CSQLE_Matcher.group(), if(CSQLE_TimeTag.get(1), sourceTableLatest(CSQLE_ProjectBranchName + &quot;:&quot; + CSQLE_dataSourceName, CSQLE_TimeTag.get(0)), sourceTable(CSQLE_ProjectBranchName + &quot;:&quot; + CSQLE_dataSourceName, CSQLE_TimeTag.get(0))));&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_modelTask = null;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_task.getNonKeyParameters().propertyIsSet(&quot;modelDates&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_modelTask = CSQLE_task.getNonKeyParameters().getObject(&quot;specificDelegate&quot;).getTable(&quot;modelInstances&quot;).locateByPropertyIfExists(CSQLE_dependencies + CSQLE_dataSourceName.replace(&quot;FreeFormReport-format&quot;, &quot;FreeFormReport&quot;).replace(&quot;FreeFormReport-data&quot;, &quot;FreeFormReport&quot;), &quot;model&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_asOfDate = CSQLE_TimeTag.get(0).getDate(&quot;instanceDate&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_addedSQL = &quot;&quot;;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_taskInstanceKeys = if((CSQLE_modelTask != null) and (CSQLE_modelTask.getObject(&quot;instanceDateAndKeysValues&quot;).propertyIsSet(&quot;instanceKeyValues&quot;)), CSQLE_modelTask.getObject(&quot;instanceDateAndKeysValues&quot;).getTable(&quot;instanceKeyValues&quot;), CSQLE_task.getTaskProps().getTable(&quot;instanceKeyValues&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_dataModelInstanceKeys = if(CSQLE_dataModel.propertyIsSet(&quot;instanceKeys&quot;), CSQLE_dataModel.getTable(&quot;instanceKeys&quot;), CSQLE_dataModel.createTablePropertyValue());&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_dataSource.propertyIsSet(&quot;storageType&quot;) and (!&quot;SEGMENTED&quot;.equals(CSQLE_dataSource.getString(&quot;storageType&quot;)) and !&quot;PERMANENT&quot;.equals(CSQLE_dataSource.getString(&quot;storageType&quot;)))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CSQLE_TimeTag.get(1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = if(!&quot;&quot;.equals(CSQLE_aliaseTable), CSQLE_aliaseTable + &quot;.&quot;, &quot;&quot;) + CSQLE_dataSource.getReference(&quot;asOfDateField&quot;).getTargetObject().getProperty(&quot;name&quot;) + &quot;={ts '&quot; + class(&quot;com.axiomsl.util.basic.GenericClassUtils&quot;).date2ODBCDate(CSQLE_TimeTag.get(0).getDate(&quot;instanceDate&quot;)) + &quot;'}&quot;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexDataModelInstanceKeys = 0 &lt;comma/> indexDataModelInstanceKeys &amp;lt; CSQLE_dataModelInstanceKeys.size() &lt;comma/> indexDataModelInstanceKeys++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_dataModelInstanceKey = CSQLE_dataModelInstanceKeys.get(indexDataModelInstanceKeys);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_instanceKeyName = CSQLE_dataModelInstanceKey.getString(&quot;name&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_instanceKeyType = CSQLE_dataModelInstanceKey.getString(&quot;type&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_taskInstanceKey = CSQLE_taskInstanceKeys.locateByPropertyIfExists(CSQLE_instanceKeyName, &quot;name&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_taskInstanceKey != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_instanceKeyValue = CSQLE_taskInstanceKey.getString(&quot;keyValue&quot;);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !&quot;&quot;.equals(CSQLE_userInstanceKeys)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_arrayUserInstanceKeys = CSQLE_userInstanceKeys.split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexArrayUserInstanceKeys = 0 &lt;comma/> indexArrayUserInstanceKeys &amp;lt; CSQLE_arrayUserInstanceKeys.size() &lt;comma/> indexArrayUserInstanceKeys++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_instanceKeyValue = if(CSQLE_instanceKeyName.equals(CSQLE_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).get(0).trim()), if(CSQLE_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).size() &amp;gt;= 2, if(!&quot;?&quot;.equals(CSQLE_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).get(1).trim()), CSQLE_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).get(1).trim(), CSQLE_instanceKeyValue), &quot;&quot;), CSQLE_instanceKeyValue);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;case>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;" valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ObjectEquals"{cb5f4816-3c56-49ee-b78c-68dd79722210}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(&quot;DATE&quot;, CSQLE_instanceKeyType)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = CSQLE_addedSQL + if(!&quot;&quot;.equals(CSQLE_addedSQL), &quot; and &quot;, &quot;&quot;) + if(!&quot;&quot;.equals(CSQLE_aliaseTable), CSQLE_aliaseTable + &quot;.&quot;, &quot;&quot;) + CSQLE_instanceKeyName + &quot;={ts '&quot; + CSQLE_instanceKeyValue + &quot;'}&quot;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;" valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ObjectEquals"{cb5f4816-3c56-49ee-b78c-68dd79722210}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(&quot;INTEGER&quot;, CSQLE_instanceKeyType) or " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ObjectEquals"{cb5f4816-3c56-49ee-b78c-68dd79722210}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(&quot;FLOAT&quot;, CSQLE_instanceKeyType)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = CSQLE_addedSQL + if(!&quot;&quot;.equals(CSQLE_addedSQL), &quot; and &quot;, &quot;&quot;) + if(!&quot;&quot;.equals(CSQLE_aliaseTable), CSQLE_aliaseTable + &quot;.&quot;, &quot;&quot;) + CSQLE_instanceKeyName + &quot;=&quot; + CSQLE_instanceKeyValue;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;default>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = CSQLE_addedSQL + if(!&quot;&quot;.equals(CSQLE_addedSQL), &quot; and &quot;, &quot;&quot;) + if(!&quot;&quot;.equals(CSQLE_aliaseTable), CSQLE_aliaseTable + &quot;.&quot;, &quot;&quot;) + CSQLE_instanceKeyName + &quot;='&quot; + CSQLE_instanceKeyValue.replaceAll(&quot;'&quot;, &quot;''&quot;) + &quot;'&quot;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/default>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/case>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_dataModelStreamKeys = CSQLE_dataModel.getTable(&quot;streamKeys&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_taskKeyParameters = CSQLE_task.getTaskProps().getObject(&quot;keyParameters&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_taskStreamKeys = if(CSQLE_taskKeyParameters.propertyIsSet(&quot;streams&quot;), CSQLE_taskKeyParameters.getTable(&quot;streams&quot;), CSQLE_taskKeyParameters.createTablePropertyValue());&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexDataModelStreamKeys = 0 &lt;comma/> indexDataModelStreamKeys &amp;lt; CSQLE_dataModelStreamKeys.size() &lt;comma/> indexDataModelStreamKeys++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_dataModelStreamKey = CSQLE_dataModelStreamKeys.get(indexDataModelStreamKeys);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_streamKeyName = CSQLE_dataModelStreamKey.getString(&quot;streamKeyName&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_streamKeyField = CSQLE_dataModelStreamKey.getObject(&quot;streamKeyColumn&quot;).getReference(&quot;value&quot;).getTargetObject().getString(&quot;name&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_streamKeyType = CSQLE_dataModelStreamKey.getObject(&quot;streamKeyColumn&quot;).getReference(&quot;value&quot;).getTargetObject().getString(&quot;type&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_streamKeyValue = &quot;&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_taskStreamKey = CSQLE_taskStreamKeys.locateByPropertyIfExists(CSQLE_streamKeyName, &quot;streamKeyName&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_taskStreamKey != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_taskStreamKeyValues = CSQLE_taskStreamKey.getTable(&quot;values&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexTaskStreamKeyValues = 0 &lt;comma/> indexTaskStreamKeyValues &amp;lt; CSQLE_taskStreamKeyValues.size() &lt;comma/> indexTaskStreamKeyValues++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_streamKeyValue = CSQLE_streamKeyValue + if(!&quot;&quot;.equals(CSQLE_streamKeyValue), &quot;,&quot;, &quot;&quot;) + CSQLE_taskStreamKeyValues.get(indexTaskStreamKeyValues).getString(&quot;value&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_taskStreamCombination = CSQLE_task.getTaskProps().getTable(&quot;instanceKeyValues&quot;).locateByPropertyIfExists(&quot;stream_combination&quot;, &quot;name&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_taskStreamCombination != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var  CSQLE_taskStreamCombinationValue = CSQLE_taskStreamCombination.getString(&quot;keyValue&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexTaskStreamCombinationValue = 0 &lt;comma/> indexTaskStreamCombinationValue &amp;lt; CSQLE_taskStreamCombinationValue.split(&quot;;&quot;).size() &lt;comma/> indexTaskStreamCombinationValue++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_streamKeyName.equalsIgnoreCase(CSQLE_taskStreamCombinationValue.split(&quot;;&quot;).get(indexTaskStreamCombinationValue).split(&quot;=&quot;).get(0).trim())&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_streamKeyValue = CSQLE_taskStreamCombinationValue.split(&quot;;&quot;).get(indexTaskStreamCombinationValue).split(&quot;=&quot;).get(1).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !&quot;&quot;.equals(CSQLE_userStreamKeys) and !&quot;NULL&quot;.equals(CSQLE_userStreamKeys)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_arrayUserStreamKeys = CSQLE_userStreamKeys.split(&quot;;&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexArrayUserStreamKeys = 0 &lt;comma/> indexArrayUserStreamKeys &amp;lt; CSQLE_arrayUserStreamKeys.size() &lt;comma/> indexArrayUserStreamKeys++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_streamKeyValue = if(CSQLE_streamKeyName.equals(CSQLE_arrayUserStreamKeys.get(indexArrayUserStreamKeys).split(&quot;=&quot;).get(0).trim()), if(CSQLE_arrayUserStreamKeys.get(indexArrayUserStreamKeys).split(&quot;=&quot;).size() &amp;gt;= 2, if(!&quot;?&quot;.equals(CSQLE_arrayUserStreamKeys.get(indexArrayUserStreamKeys).split(&quot;=&quot;).get(1).trim()), CSQLE_arrayUserStreamKeys.get(indexArrayUserStreamKeys).split(&quot;=&quot;).get(1).trim(), CSQLE_streamKeyValue), &quot;&quot;), CSQLE_streamKeyValue);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !&quot;&quot;.equals(CSQLE_streamKeyValue)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_streamKeyValue = if(&quot;%%&quot;.equals(CSQLE_streamKeyValue), &quot;&quot;, CSQLE_streamKeyValue);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;case>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;" valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ObjectEquals"{cb5f4816-3c56-49ee-b78c-68dd79722210}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(&quot;DATE&quot;, CSQLE_streamKeyType)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = CSQLE_addedSQL + if(!&quot;&quot;.equals(CSQLE_addedSQL), &quot; and &quot;, &quot;&quot;) + if(!&quot;&quot;.equals(CSQLE_aliaseTable), CSQLE_aliaseTable + &quot;.&quot;, &quot;&quot;) + CSQLE_streamKeyField + &quot;={ts '&quot; + CSQLE_streamKeyValue + &quot;'}&quot;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;" valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ObjectEquals"{cb5f4816-3c56-49ee-b78c-68dd79722210}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(&quot;INTEGER&quot;, CSQLE_streamKeyType) or " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ObjectEquals"{cb5f4816-3c56-49ee-b78c-68dd79722210}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(&quot;FLOAT&quot;, CSQLE_streamKeyType)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = CSQLE_addedSQL + if(!&quot;&quot;.equals(CSQLE_addedSQL), &quot; and &quot;, &quot;&quot;) + if(!&quot;&quot;.equals(CSQLE_aliaseTable), CSQLE_aliaseTable + &quot;.&quot;, &quot;&quot;) + CSQLE_streamKeyField + &quot;=&quot; + CSQLE_streamKeyValue;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;default>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = CSQLE_addedSQL + if(!&quot;&quot;.equals(CSQLE_addedSQL), &quot; and &quot;, &quot;&quot;) + if(!&quot;&quot;.equals(CSQLE_aliaseTable), CSQLE_aliaseTable + &quot;.&quot;, &quot;&quot;) + CSQLE_streamKeyField + &quot;='&quot; + CSQLE_streamKeyValue.replaceAll(&quot;'&quot;, &quot;''&quot;) + &quot;'&quot;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/default>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/case>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;CSQLE_addedSQL = if(!&quot;&quot;.equals(CSQLE_addedSQL.trim()), if(CSQLE_SQL.toLowerCase().indexOf(&quot;where&quot;) &amp;lt; 0, &quot; where 1=1 &quot;, &quot;&quot;) + &quot; and &quot; + CSQLE_addedSQL, &quot;&quot;);&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;var CSQLE_Matcher_sectionWHERE = class(&quot;java.util.regex.Pattern&quot;).compile(&quot;%%WHERE&quot; + CSQLE_indexPattern + &quot;(.*?)%%&quot;).matcher(CSQLE_SQL);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_countDataSource &amp;gt; 1&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_Matcher_sectionWHERE.find()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_SQL = CSQLE_SQL.replace(CSQLE_Matcher_sectionWHERE.group(), CSQLE_addedSQL);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_Matcher_sectionWHERE.find()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_SQL = CSQLE_SQL.replace(CSQLE_Matcher_sectionWHERE.group(), CSQLE_addedSQL);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CSQLE_Matcher_orderby = class(&quot;java.util.regex.Pattern&quot;).compile(&quot;(group( +)by)|(order( +)by)&quot;, class(&quot;java.util.regex.Pattern&quot;).CASE_INSENSITIVE).matcher(CSQLE_SQL);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CSQLE_Matcher_orderby.find()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_SQL = CSQLE_SQL.replaceFirst(CSQLE_Matcher_orderby.group(), CSQLE_addedSQL + &quot; &quot; + CSQLE_Matcher_orderby.group());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSQLE_SQL = CSQLE_SQL + CSQLE_addedSQL;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;CSQLE_indexPattern++;&#xa;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&lt;/then>&#xa;&lt;/if>&#x9;&#xa;trace(&quot;#!#!#! ppc_ConversionSQLExtended. SQL: &quot; + CSQLE_SQL + &quot; #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_ConversionSQLExtended. &quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_RunTime"{01bdef00-6989-424b-84f9-c81ca2885e47}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CSQLE_startDate, new(&quot;java.util.Date&quot;)) + &quot; #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_ConversionSQLExtended. Finished #!#!#!&quot;);&#xa;;CSQLE_SQL" valueType="string"/>
                </object>
            </property>
        </object>
    </property>
</object>