<object stamp="73103c80-fe7b-4227-a82e-91115de5c21d_1637678964191" type="UserDefinedFunction" version="2.0">
    <property name="objectId" value="e8e8061a-6a08-4847-9897-5cef0d8d2147" valueType="string"/>
    <property name="branchId" value="UDFs" valueType="string"/>
    <property name="name" value="ppc_CheckPPCTable" valueType="string"/>
    <property name="description" value="2021.11.23" valueType="string"/>
    <property name="arguments" valueType="table">
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CPPCT_object" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CPPCT_PPCTable" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CPPCT_mode" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
    </property>
    <property name="body" valueType="object">
        <object type="ASLExpression" version="1.0">
            <property name="expression" valueType="table">
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="&lt;!--&#xa;Copyright by AXIOM SL, Igor Kirilyuk&#xa;Version of 2021.11.23&#xa;Check PPC table&#xa;Input variables:&#xa;CPPCT_object - &#xa;CPPCT_PPCTable -&#xa;CPPCT_mode - &#xa;-->&#xa;trace(&quot;#!#!#! ppc_CheckPPCTable. Started #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_CheckPPCTable. Copyright by AXIOM SL, Igor Kirilyuk, 2021.11.23 #!#!#!&quot;);&#xa;&#xa;var CPPCT_startDate = new(&quot;java.util.Date&quot;);&#xa;&#xa;var CPPCT_jbook = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_JBookReference"{7fbc704a-06a1-4928-851f-2fd097a63b7d}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_object);&#xa;&#xa;var CPPCT_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_object, &quot;PPCDelimiter&quot;);&#xa;var CPPCT_separatorListSheets = if((CPPCT_cellReference != null) and !CPPCT_jbook.getText(CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), CPPCT_cellReference.get(2)).trim().isEmpty(), CPPCT_jbook.getText(CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), CPPCT_cellReference.get(2)).trim(), &quot;,&quot;);&#xa;trace(&quot;#!#!#! ppc_CheckPPCTable. The sheet list separator symbol - '&quot; + CPPCT_separatorListSheets + &quot;' #!#!#!&quot;);&#xa;&#xa;var CPPCT_listParametersPPCTable = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ListParametersPPCTable"{1db7a4eb-bf3a-41c4-82f8-b5f1b904e1fa}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_PPCTable, CPPCT_mode);&#xa;&#xa;&lt;if> !CPPCT_PPCTable.isEmpty()&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;&lt;case>&#xa;&#x9;&#x9;&#x9;CPPCT_mode == 1&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table: ExtendRows #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_Sheet = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_SheetADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_StartRow = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_StartColumn = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_ConditionColumn = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_OffsetTemplateRow = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_Condition = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_SQL = 7;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_NumberFirstRowsToExtend = 8;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_PrintArea = 9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_OffsetTemplateName = 10;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_IndexSQLFieldSubTotal = 11;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_IndexTemplateRowSubTotalAndName = 12;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_OffsetGrandTotalRow = 13;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_CSVColumn = 14;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_CSVCellName = 15;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendRows_ListParameters = 16;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; CPPCT_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listParameters = CPPCT_listParametersPPCTable.get(indexPPCTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listSheet = (CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_Sheet) + if(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_SheetADJ).isEmpty(), &quot;&quot;,  CPPCT_separatorListSheets + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_SheetADJ))).split(CPPCT_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check main/ADJ sheet -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!A1&quot;) == null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' not exists #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check start row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateExtendRowsPPCTable_Row = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_StartRow).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendRowsPPCTable_Row = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_StartRow).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendRowsPPCTable_Row = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check start column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listStartColumn = null;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_StartColumn).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start column is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_listStartColumn = CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_StartColumn).split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_listStartColumn.size() == 1&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_listStartColumn.get(0).trim().matches(&quot;([A-Z]+)|([A-Z]+:[0-9]+:[0-9]+)&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start column does not match format (Example: A or A:1:12) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = 0 &lt;comma/> indexColumn &amp;lt; CPPCT_listStartColumn.size() &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (indexColumn == 0) and (!CPPCT_listStartColumn.get(indexColumn).trim().matches(&quot;[A-Z]+:[0-9]+:[0-9]+&quot;))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. First start column does not match format (Example: A:1:12,H,AA) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (indexColumn &amp;gt; 0) and (!CPPCT_listStartColumn.get(indexColumn).trim().matches(&quot;[A-Z]+&quot;))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Subsequent start columns does not match format (Example: A:1:12,H,AA) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check condition column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_ConditionColumn).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_ConditionColumn).matches(&quot;([A-Z]+)|([A-Z]+:[A-Z]+)&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column does not match format (Example: AZ or AD:AF) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_ConditionColumn).split(&quot;:&quot;).size() == 2&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_condition1 = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_Sheet).trim() + &quot;!&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_ConditionColumn).split(&quot;:&quot;).get(0) + &quot;1&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_condition2 = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_Sheet).trim() + &quot;!&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_ConditionColumn).split(&quot;:&quot;).get(1) + &quot;1&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_condition1.get(2) &amp;gt;= CPPCT_condition2.get(2)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. The start value of the condition range must be strictly less than the end value of the range #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset template row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateExtendRowsPPCTable_OffsetTemplateRow = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateRow).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Template row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendRowsPPCTable_OffsetTemplateRow = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateRow).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Template row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendRowsPPCTable_OffsetTemplateRow = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check SQL query -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_SQL).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_SQL).toLowerCase().startsWith(&quot;select &quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query must begin with a keyword SELECT #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check out first rows -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_NumberFirstRowsToExtend).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_NumberFirstRowsToExtend).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Out first rows to table is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendRowsPPCTable_OffsetTemplateRow&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_NumberFirstRowsToExtend)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateRow))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Out first rows to table must be strictly more template row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset template name -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateName).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateName).matches(&quot;([0-9]+)|(([0-9]+):([0-9]+))&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset row template names does not match format (Example: 2 or 2:1) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendRowsPPCTable_OffsetTemplateRow&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateName).split(&quot;:&quot;).get(0)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateRow))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset row template names must be strictly more template row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check index SQL field for separated subtotal -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_IndexSQLFieldSubTotal).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_IndexSQLFieldSubTotal).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Index SQL field for separated subtotal is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset template subtotal row and name cells -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_IndexTemplateRowSubTotalAndName).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_IndexTemplateRowSubTotalAndName).matches(&quot;([0-9]+)|([0-9]+:[0-9]+)|([0-9]+\\([0-9]+:[0-9]+\\))|([0-9]+\\([0-9]+:[0-9]+\\):[0-9]+)&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset template row subtotal and name cells does not match format (Example: 2 or 2:4 or 2(3:2):6 #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_IndexTemplateRowSubTotalAndName).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset template row subtotal and name cells cannot be empty #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset grand total row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetGrandTotalRow).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetGrandTotalRow).matches(&quot;([0-9]+)|(([0-9]+):([0-9]+))&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset grand total row does not match format (Example: 3 or 3:4) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendRowsPPCTable_OffsetTemplateRow&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).get(0)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetTemplateRow))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset grand total row must be strictly more template row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).size() == 2&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).get(1)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).get(0))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset grand total template names row must be strictly more offset grand total row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check CSV column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_CSVColumn).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_CSVColumn).matches(&quot;[A-Z]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. CSV column does not match format (Example: AB) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check name cell for insert CSV formula -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_CSVCellName).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_CSVCellName)) == null&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Name cell '&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendRows_CSVCellName) + &quot;' for insert CSV formula is not found #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check list parameters -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_conditionFormatting = CPPCT_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_conditionFormatting != null) and !CPPCT_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_value = &quot;&quot;;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateConditionFormatting = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_startRange != null) and (CPPCT_stopRange != null)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to columns -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = CPPCT_startRange.get(2) &lt;comma/> indexColumn &amp;lt;= CPPCT_stopRange.get(2) &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn, CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_startRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_startRange.get(1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_value = CPPCT_value + if(!CPPCT_value.isEmpty(), &quot;, &quot;, &quot;&quot;) + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, indexColumn) + (CPPCT_startRange.get(1) + 1);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn, CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_stopRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_stopRange.get(1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_value = CPPCT_value + if(!CPPCT_value.isEmpty(), &quot;, &quot;, &quot;&quot;) + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, indexColumn) + (CPPCT_stopRange.get(1) + 1);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to rows -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexRow = CPPCT_startRange.get(1) &lt;comma/> indexRow &amp;lt;= CPPCT_stopRange.get(1) &lt;comma/> indexRow++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2), CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol1() &amp;lt; CPPCT_startRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_rangeMergeCells.getCol1() &amp;lt; CPPCT_startRange.get(2)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_value = CPPCT_value + if(!CPPCT_value.isEmpty(), &quot;, &quot;, &quot;&quot;) + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_rangeMergeCells.getCol1()) + (indexRow + 1);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2), CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol2() &amp;gt; CPPCT_stopRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_rangeMergeCells.getCol2() &amp;gt; CPPCT_stopRange.get(2)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_value = CPPCT_value + if(!CPPCT_value.isEmpty(), &quot;, &quot;, &quot;&quot;) + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_stopRange.get(2)) + (indexRow + 1);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Range calculation error condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateConditionFormatting&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell. ConditionFormatting: &quot; + CPPCT_conditionFormatting + &quot;. Error value: &quot; + CPPCT_value + &quot; #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;CPPCT_mode == 2&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table: ExtendCols #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Not implemented #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;CPPCT_mode == 3&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table: ExtendColsEX #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_Sheet = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_SheetADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_StartRow = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_StartColumn = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_ConditionColumn = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_OffsetTemplateColumn = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_Condition = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_SQL = 7;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_NumberFirstColsToExtend = 8;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_PrintArea = 9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_OffsetTemplateNames = 10;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_IndexSQLFieldSubTotal = 11;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_IndexTemplateColSubTotalAndNames = 12;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_OffsetGrandTotal = 13;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_CSVColumn = 14;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_CSVCellName = 15;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendCols_ListParameters = 16;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; CPPCT_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listParameters = CPPCT_listParametersPPCTable.get(indexPPCTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listSheet = (CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_Sheet) + if(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_SheetADJ).isEmpty(), &quot;&quot;,  CPPCT_separatorListSheets + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_SheetADJ))).split(CPPCT_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check main/ADJ sheet -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!A1&quot;) == null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' not exists #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check start row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateExtendColsPPCTable_Row = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_StartRow).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendColsPPCTable_Row = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_StartRow).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendColsPPCTable_Row = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check start column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listStartColumn = null;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_StartColumn).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start column is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_listStartColumn = CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_StartColumn).split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = 0 &lt;comma/> indexColumn &amp;lt; CPPCT_listStartColumn.size() &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_listStartColumn.get(indexColumn).trim().matches(&quot;[A-Z]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Subsequent start columns does not match symbol (Example: A) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check condition column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_ConditionColumn).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_ConditionColumn).matches(&quot;([A-Z]+)|([A-Z]+\((.*?)\))&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column does not match format (Example: AZ or AZ(4) or AZ(4,6-8)) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var _matcher = class(&quot;java.util.regex.Pattern&quot;).compile(&quot;%%(.*?)%%&quot;).matcher(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_ConditionColumn));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for>  &lt;comma/> _matcher.find() &lt;comma/> &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var _value = _matcher.group();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var index = 0 &lt;comma/> index &amp;lt; _value.split(&quot;,&quot;).size() &lt;comma/> index++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !_value.split(&quot;,&quot;).get(index).matches(&quot;([0-9]+)|([0-9]+-[0-9]+)&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column does not match format (Example: AZ or AZ(4) or AZ(4,6-8)) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset template column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateExtendColsPPCTable_OffsetTemplateColumn = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateColumn).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Template column is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendColsPPCTable_OffsetTemplateColumn = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateColumn).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Template column is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendColsPPCTable_OffsetTemplateColumn = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check SQL query -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_SQL).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_SQL).toLowerCase().startsWith(&quot;select &quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query must begin with a keyword SELECT #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check out first columns -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_NumberFirstColsToExtend).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_NumberFirstColsToExtend).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Out first columns to table is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendColsPPCTable_OffsetTemplateColumn&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_NumberFirstColsToExtend)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateColumn))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Out first columns to table must be strictly more template row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset template name -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateNames).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateNames).matches(&quot;([0-9]+)|(([0-9]+):([0-9]+))&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset column template names does not match format (Example: 2 or 2:1) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendColsPPCTable_OffsetTemplateColumn&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateNames).split(&quot;:&quot;).get(0)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateColumn))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset column template names must be strictly more template column #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check index SQL field for separated subtotal -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_IndexSQLFieldSubTotal).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_IndexSQLFieldSubTotal).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Index SQL field for separated subtotal is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset template subtotal column and name cells -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_IndexTemplateColSubTotalAndNames).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_IndexTemplateColSubTotalAndNames).matches(&quot;^(([A-Z]+)|([A-Z]+:[A-Z]+)|([A-Z]+\\([0-9]+,[0-9]+\\))|([A-Z]+\\([0-9]+,[0-9]+\\):[A-Z]+)){0,1}(,(([A-Z]+)|([A-Z]+:[A-Z]+))){0,}$&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset template column subtotal and name cells does not match format (Example: A or A:D or A(3,2):D #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check offset grand total column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetGrandTotal).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetGrandTotal).matches(&quot;([0-9]+)|(([0-9]+):([0-9]+))&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset grand total column does not match format (Example: 3 or 3:4) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendColsPPCTable_OffsetTemplateColumn&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetGrandTotal).split(&quot;:&quot;).get(0)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetTemplateColumn))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset grand total column must be strictly more template row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetGrandTotal).split(&quot;:&quot;).size() == 2&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetGrandTotal).split(&quot;:&quot;).get(1)) &amp;lt;= class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_OffsetGrandTotal).split(&quot;:&quot;).get(0))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Offset grand total template names row must be strictly more offset grand total row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check CSV column -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_CSVColumn).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_CSVColumn).matches(&quot;[A-Z]+&quot;) or CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_CSVColumn).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. CSV column does not match format (Example: AB or 14) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check name cell for insert CSV formula -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_CSVCellName).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_CSVCellName)) == null&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Name cell '&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendCols_CSVCellName) + &quot;' for insert CSV formula is not found #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check list parameters -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_conditionFormatting = CPPCT_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_conditionFormatting != null) and !CPPCT_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateConditionFormatting = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_startRange != null) and (CPPCT_stopRange != null)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to columns -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = CPPCT_startRange.get(2) &lt;comma/> indexColumn &amp;lt;= CPPCT_stopRange.get(2) &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn, CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_startRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn, CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_stopRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to rows -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexRow = CPPCT_startRange.get(1) &lt;comma/> indexRow &amp;lt;= CPPCT_stopRange.get(1) &lt;comma/> indexRow++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2), CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol1() &amp;lt; CPPCT_startRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2), CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol2() &amp;gt; CPPCT_stopRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Range calculation error condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateConditionFormatting&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;CPPCT_mode == 4&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table: ExtendBlocks #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_Sheets = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_SheetsADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_StartRowBlock = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_StopRowBlock = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_InsertRowBlock = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_AddressCellNumberBlock = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_SQL = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlocks_ListParameters = 7;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; CPPCT_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listParameters = CPPCT_listParametersPPCTable.get(indexPPCTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listSheet = (CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_Sheets) + if(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_SheetsADJ).isEmpty(), &quot;&quot;,  CPPCT_separatorListSheets + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_SheetsADJ))).split(CPPCT_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check main/ADJ sheet -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!A1&quot;) == null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' not exists #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check start block row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_StartRowBlock).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start block row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_StartRowBlock).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start block row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateStartRowBlock = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim().trim() + &quot;!A&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_StartRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellReference != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = 0 &lt;comma/> indexColumn &amp;lt;= CPPCT_jbook.getBook().getSheet(CPPCT_cellReference.get(0)).getLastCol() &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn, CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_cellReference.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateStartRowBlock = (CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_cellReference.get(1)) or CPPCT_stateStartRowBlock;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateStartRowBlock&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start row block for sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check stop block row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_StopRowBlock).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start block row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_StopRowBlock).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start block row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateStopRowBlock = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!A&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_StopRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellReference != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = 0 &lt;comma/> indexColumn &amp;lt;= CPPCT_jbook.getBook().getSheet(CPPCT_cellReference.get(0)).getLastCol() &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn, CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_cellReference.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateStopRowBlock = (CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_cellReference.get(1)) or CPPCT_stateStopRowBlock;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateStopRowBlock&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Stop row block for sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check inserted block row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_InsertRowBlock).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start block row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_InsertRowBlock).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start block row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateInsertRowBlock = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!A&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_InsertRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellReference != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_jbook.getBook().getSheet(CPPCT_cellReference.get(0)).getLastRow() &amp;lt; CPPCT_cellReference.get(1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. The row number, from which the block is inserted, on sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' goes beyond the work area #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = 0 &lt;comma/> indexColumn &amp;lt;= CPPCT_jbook.getBook().getSheet(CPPCT_cellReference.get(0)).getLastCol() &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn, CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_cellReference.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateInsertRowBlock = (CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_cellReference.get(1)) or (CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_cellReference.get(1)) or CPPCT_stateInsertRowBlock;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateInsertRowBlock&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Inserted row block for sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check address cell number block -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_AddressCellNumberBlock).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Address cell number block is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_AddressCellNumberBlock).matches(&quot;[A-Z]+[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Address cell number block does not match format (Example: F12) #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check SQL query -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_SQL).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlocks_SQL).toLowerCase().startsWith(&quot;select &quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query must begin with a keyword SELECT #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check list parameters -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_conditionFormatting = CPPCT_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_conditionFormatting != null) and !CPPCT_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateConditionFormatting = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_startRange != null) and (CPPCT_stopRange != null)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to columns -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = CPPCT_startRange.get(2) &lt;comma/> indexColumn &amp;lt;= CPPCT_stopRange.get(2) &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn, CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_startRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn, CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_stopRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to rows -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexRow = CPPCT_startRange.get(1) &lt;comma/> indexRow &amp;lt;= CPPCT_stopRange.get(1) &lt;comma/> indexRow++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2), CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol1() &amp;lt; CPPCT_startRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2), CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol2() &amp;gt; CPPCT_stopRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Range calculation error condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateConditionFormatting&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;CPPCT_mode == 5&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table: ExtendBlockInBlockEX #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_Sheet = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_SheetADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_start = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_ExternalSQL = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_ColumnConditionExternalBlock = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_start = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_stop = 7;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_InternalSQL = 8;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_ColumnConditionInternalBlock = 9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_PPCTableExtendBlockInBlock_ListParameters = 10;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; CPPCT_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listParameters = CPPCT_listParametersPPCTable.get(indexPPCTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_listSheet = (CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_Sheet) + if(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_SheetADJ).isEmpty(), &quot;&quot;,  CPPCT_separatorListSheets + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_SheetADJ))).split(CPPCT_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check main/ADJ sheet -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!A1&quot;) == null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' not exists #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check start external block row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_start = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_start).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start external block row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_start = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_start).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start external block row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_start = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateStartRowBlock = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim().trim() + &quot;!A&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_start));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellReference != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = 0 &lt;comma/> indexColumn &amp;lt;= CPPCT_jbook.getBook().getSheet(CPPCT_cellReference.get(0)).getLastCol() &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn, CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_cellReference.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateStartRowBlock = (CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_cellReference.get(1)) or CPPCT_stateStartRowBlock;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateStartRowBlock&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start external block row for sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check stop external block row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_stop = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Stop external block row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_stop = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Stop external block row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_stop = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateStopRowBlock = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!A&quot; + CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellReference != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = 0 &lt;comma/> indexColumn &amp;lt;= CPPCT_jbook.getBook().getSheet(CPPCT_cellReference.get(0)).getLastCol() &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn, CPPCT_cellReference.get(0), CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_cellReference.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_cellReference.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateStopRowBlock = (CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_cellReference.get(1)) or CPPCT_stateStopRowBlock;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateStopRowBlock&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Stop external block row for sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_jbook.getBook().getSheet(CPPCT_cellReference.get(0)).getLastRow() &amp;lt; (CPPCT_cellReference.get(1) + 1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. The external block row number, from which the block is inserted, on sheet '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' goes beyond the work area #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check SQL query external block -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalSQL).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query external block is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalSQL).toLowerCase().startsWith(&quot;select &quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query external block must begin with a keyword SELECT #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check condition column external block -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ColumnConditionExternalBlock).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column external block is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ColumnConditionExternalBlock).matches(&quot;[A-Z]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column external block is not column name #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check start internal block row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_start).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start internal block row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_start).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start internal block row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_start&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_start)) &amp;gt; class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_start)) &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Start internal block row must be more or equals start external block row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check stop internal block row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_stop).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Stop internal block row is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_stop).matches(&quot;[0-9]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Stop internal block row is not number #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateExtendBlockInBlock_ExternalRangeBlock_stop&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop)) &amp;lt; class(&quot;java.lang.Integer&quot;).parseInt(CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalRangeBlock_stop)) &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Stop internal block row must be less or equals stop external block row #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check SQL query internal block -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalSQL).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query internal block is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_InternalSQL).toLowerCase().startsWith(&quot;select &quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. SQL query internal block must begin with a keyword SELECT #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check condition column internal block -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ColumnConditionInternalBlock).isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column internal block is not set #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CPPCT_PPCTable.get(indexPPCTable).get(CPPCT_PPCTableExtendBlockInBlock_ColumnConditionInternalBlock).matches(&quot;[A-Z]+&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition column internal block is not column name #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- check list parameters -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_conditionFormatting = CPPCT_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_conditionFormatting != null) and !CPPCT_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexListSheet = 0 &lt;comma/> indexListSheet &amp;lt; CPPCT_listSheet.size() &lt;comma/> indexListSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stateConditionFormatting = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_jbook, CPPCT_listSheet.get(indexListSheet).trim() + &quot;!&quot; + CPPCT_conditionFormatting.split(&quot;-&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (CPPCT_startRange != null) and (CPPCT_stopRange != null)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_cellFormat;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to columns -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumn = CPPCT_startRange.get(2) &lt;comma/> indexColumn &amp;lt;= CPPCT_stopRange.get(2) &lt;comma/> indexColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn, CPPCT_startRange.get(0), CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_startRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow1() &amp;lt; CPPCT_startRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn, CPPCT_stopRange.get(0), CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(CPPCT_stopRange.get(1), indexColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getRow2() &amp;gt; CPPCT_stopRange.get(1)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- step to rows -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexRow = CPPCT_startRange.get(1) &lt;comma/> indexRow &amp;lt;= CPPCT_stopRange.get(1) &lt;comma/> indexRow++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2), CPPCT_startRange.get(0), indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_startRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_startRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol1() &amp;lt; CPPCT_startRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_cellFormat = CPPCT_jbook.getCellFormat(CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2), CPPCT_stopRange.get(0), indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_cellFormat.isMergeCells()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setSheet(CPPCT_stopRange.get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_jbook.setActiveCell(indexRow, CPPCT_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CPPCT_rangeMergeCells = CPPCT_jbook.getSelection(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CPPCT_stateConditionFormatting = (CPPCT_rangeMergeCells.getCol2() &amp;gt; CPPCT_stopRange.get(2)) or CPPCT_stateConditionFormatting;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Range calculation error condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CPPCT_stateConditionFormatting&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table &quot; + indexPPCTable + &quot;. Condition formatting static area for list '&quot; + CPPCT_listSheet.get(indexListSheet).trim() + &quot;' hits a merged cell #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/case>&#x9;&#xa;&#x9;&lt;/then>&#xa;&#x9;&lt;else>&#xa;&#x9;&#x9;trace(&quot;#!#!#! ppc_CheckPPCTable. Table is empty #!#!#!&quot;);&#xa;&#x9;&lt;/else>&#xa;&lt;/if>&#x9;&#xa;trace(&quot;#!#!#! ppc_CheckPPCTable. &quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_RunTime"{01bdef00-6989-424b-84f9-c81ca2885e47}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CPPCT_startDate, new(&quot;java.util.Date&quot;)) + &quot; #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_CheckPPCTable. Finished #!#!#!&quot;);" valueType="string"/>
                </object>
            </property>
        </object>
    </property>
</object>