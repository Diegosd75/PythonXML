<object stamp="ca08affd-974d-47b6-85ff-175b1298af92_1626895293799" type="UserDefinedFunction" version="2.0">
    <property name="objectId" value="9c2de6a2-eae6-4547-90ae-26c306e36c77" valueType="string"/>
    <property name="branchId" value="UDFs" valueType="string"/>
    <property name="name" value="ppc_CreateTimeTag" valueType="string"/>
    <property name="description" value="2021.02.14" valueType="string"/>
    <property name="arguments" valueType="table">
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CTT_task" valueType="string"/>
            <property name="description" value="system variable &quot;task&quot;" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CTT_dataSource" valueType="string"/>
            <property name="description" value="DataSource object" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CTT_userInstanceKeys" valueType="string"/>
            <property name="description" value="string instanceKey values" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="CTT_dependencies" valueType="string"/>
            <property name="description" value="dependencies name" valueType="string"/>
        </object>
    </property>
    <property name="body" valueType="object">
        <object type="ASLExpression" version="1.0">
            <property name="expression" valueType="table">
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="&lt;!--&#xa;Copyright by AXIOM SL, Igor Kirilyuk&#xa;Version of 2021.02.14&#xa;Calculating TimeTag from user defined InstanceKey&#xa;Input variables:&#xa;CTT_task - system variable &quot;task&quot;;&#xa;CTT_dataSource - DataSource object;&#xa;CTT_userInstanceKeys - string instanceKey values;&#xa;CTT_dependencies - dependencies name;&#xa;-->&#xa;trace(&quot;#!#!#! ppc_CreateTimeTag. Started #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_CreateTimeTag. Copyright by AXIOM SL, Igor Kirilyuk, 2021.02.14 #!#!#!&quot;);&#xa;&#xa;var CTT_startDate = new(&quot;java.util.Date&quot;);&#xa;&#xa;var CTT_TimeTag;&#xa;var CTT_isAllInstances = false;&#xa;&lt;if> &quot;LATESTINSTANCE&quot;.equals(CTT_userInstanceKeys.trim().toUpperCase())&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;CTT_TimeTag = latestInstance(CTT_task.getAsOfDate(), CTT_dataSource.getString(&quot;name&quot;));&#xa;&#x9;&lt;/then>&#xa;&#x9;&lt;else>&#xa;&#x9;&#x9;var CTT_asOfDate = CTT_task.getAsOfDate();&#xa;&#x9;&#x9;var CTT_modelTask = null;&#xa;&lt;!-- Should be removed in v10 Start&#xa;&#x9;&#x9;&lt;if> CTT_task.getNonKeyParameters().propertyIsSet(&quot;modelDates&quot;)&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;CTT_modelTask = CTT_task.getNonKeyParameters().getObject(&quot;specificDelegate&quot;).getTable(&quot;modelInstances&quot;).locateByPropertyIfExists(CTT_dependencies + CTT_dataSource.getString(&quot;name&quot;).replace(&quot;FreeFormReport-format&quot;, &quot;FreeFormReport&quot;).replace(&quot;FreeFormReport-data&quot;, &quot;FreeFormReport&quot;), &quot;model&quot;);&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/if>&#xa;Should be removed in v10 Finish -->&#xa;&lt;!-- For v10 Start -->&#x9;&#xa;&#x9;&#x9;&lt;if> CTT_task.getNonKeyParameters().getObject(&quot;specificDelegate&quot;).propertyIsSet(&quot;modelInstances&quot;)&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;CTT_modelTask = CTT_task.getNonKeyParameters().getObject(&quot;specificDelegate&quot;).getTable(&quot;modelInstances&quot;).locateByPropertyIfExists(CTT_dependencies + CTT_dataSource.getString(&quot;name&quot;).replace(&quot;FreeFormReport-format&quot;, &quot;FreeFormReport&quot;).replace(&quot;FreeFormReport-data&quot;, &quot;FreeFormReport&quot;), &quot;model&quot;);&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/if>&#xa;&lt;!-- For v10 Finish -->&#x9;&#x9;&#xa;&#x9;&#x9;&lt;if> (CTT_modelTask != null) and (CTT_dataSource.propertyIsSet(&quot;storageType&quot;) and (!&quot;SEGMENTED&quot;.equals(CTT_dataSource.getString(&quot;storageType&quot;)) and !&quot;PERMANENT&quot;.equals(CTT_dataSource.getString(&quot;storageType&quot;))))&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> CTT_modelTask.getObject(&quot;instanceDateAndKeysValues&quot;).propertyIsSet(&quot;isAllInstances&quot;) and CTT_modelTask.getObject(&quot;instanceDateAndKeysValues&quot;).getBoolean(&quot;isAllInstances&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_isAllInstances = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_asOfDate = CTT_modelTask.getObject(&quot;instanceDateAndKeysValues&quot;).getDate(&quot;instanceDate&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;CTT_TimeTag = CreateTimeTag(CTT_asOfDate);&#xa;&#x9;&#x9;var CTT_InstanceKeyValueTable = CTT_TimeTag.createTablePropertyValue();&#xa;&#x9;&#x9;CTT_TimeTag.setProperty(&quot;instanceKeyValues&quot;, CTT_InstanceKeyValueTable);&#xa;&#xa;&#x9;&#x9;var CTT_dataModel = axiomObjectManager.locate(ObjectID.createNameId(&quot;DataModel&quot;, CTT_dataSource.getBranchId(), CTT_dataSource.getString(&quot;name&quot;).replace(&quot;FreeFormReport-format&quot;, &quot;FreeFormReport&quot;).replace(&quot;FreeFormReport-data&quot;, &quot;FreeFormReport&quot;)), axiomEnvironment);&#xa;&#x9;&#x9;&lt;if> CTT_dataModel.propertyIsSet(&quot;instanceKeys&quot;)&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;var CTT_taskInstanceKeys = if((CTT_modelTask != null) and (CTT_modelTask.getObject(&quot;instanceDateAndKeysValues&quot;).propertyIsSet(&quot;instanceKeyValues&quot;)), CTT_modelTask.getObject(&quot;instanceDateAndKeysValues&quot;).getTable(&quot;instanceKeyValues&quot;), CTT_task.getTaskProps().getTable(&quot;instanceKeyValues&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;var CTT_dataModelInstanceKeys = CTT_dataModel.getTable(&quot;instanceKeys&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexDataModelInstanceKeys = 0 &lt;comma/> indexDataModelInstanceKeys &amp;lt; CTT_dataModelInstanceKeys.size() &lt;comma/> indexDataModelInstanceKeys++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_dataModelInstanceKey = CTT_dataModelInstanceKeys.get(indexDataModelInstanceKeys);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_instanceKeyName = CTT_dataModelInstanceKey.getString(&quot;name&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_instanceKeyType = CTT_dataModelInstanceKey.getString(&quot;type&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_instanceKeyValue = &quot;&quot;;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_findInstanceKey = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_taskInstanceKey = CTT_taskInstanceKeys.locateByPropertyIfExists(CTT_instanceKeyName, &quot;name&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CTT_taskInstanceKey != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_instanceKeyValue = CTT_taskInstanceKey.getString(&quot;keyValue&quot;);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> !CTT_userInstanceKeys.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_arrayUserInstanceKeys = CTT_userInstanceKeys.split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexArrayUserInstanceKeys = 0 &lt;comma/> indexArrayUserInstanceKeys &amp;lt; CTT_arrayUserInstanceKeys.size() &lt;comma/> indexArrayUserInstanceKeys++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_instanceKeyValue = if(CTT_instanceKeyName.equals(CTT_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).get(0).trim()), if(CTT_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).size() &amp;gt;= 2, if(!&quot;?&quot;.equals(CTT_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).get(1).trim()), CTT_arrayUserInstanceKeys.get(indexArrayUserInstanceKeys).split(&quot;=&quot;).get(1).trim(), CTT_instanceKeyValue), &quot;&quot;), CTT_instanceKeyValue);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_findInstanceKey = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (&quot;stream_combination&quot;.equalsIgnoreCase(CTT_instanceKeyName)) and !CTT_findInstanceKey&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_taskStreamKeys = if(CTT_task.getTaskProps().getObject(&quot;keyParameters&quot;).propertyIsSet(&quot;streams&quot;), CTT_task.getTaskProps().getObject(&quot;keyParameters&quot;).getTable(&quot;streams&quot;), CTT_task.getTaskProps().getObject(&quot;keyParameters&quot;).createTablePropertyValue());&#xa;&lt;!-- Should be removed in v10 Start&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_streamList = new(&quot;axiomsl.server.lock.StreamList&quot;, CTT_taskStreamKeys);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_instanceKeyValue = CTT_streamList.toString();&#xa;Should be removed in v10 Finish -->&#xa;&lt;!-- For v10 Start -->&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_service = class(&quot;com.axiomsl.osgi.ModuleRouter&quot;).getImpl(class(&quot;com.axiomsl.datamodel.api.DataModelService_1&quot;), CTT_task.getDbId(), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_streamList = CTT_service.parseStreamList(CTT_taskStreamKeys, axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_instanceKeyValue = CTT_streamList.toString();&#xa;&lt;!-- For v10 Finish -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_findInstanceKey = true;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> CTT_findInstanceKey&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var CTT_PropertyInstanceKeyValue = CTT_InstanceKeyValueTable.addRow(&quot;InstanceKeyValue&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_PropertyInstanceKeyValue.setProperty(&quot;name&quot;, CTT_instanceKeyName);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_PropertyInstanceKeyValue.setProperty(&quot;keyValueType&quot;, CTT_instanceKeyType);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CTT_PropertyInstanceKeyValue.setProperty(&quot;keyValue&quot;, CTT_instanceKeyValue);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&lt;/else>&#xa;&lt;/if>&#x9;&#xa;trace(&quot;#!#!#! ppc_CreateTimeTag. &quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_RunTime"{01bdef00-6989-424b-84f9-c81ca2885e47}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(CTT_startDate, new(&quot;java.util.Date&quot;)) + &quot; #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_CreateTimeTag. Finished #!#!#!&quot;);&#xa;&#xa;var CTT_result = list();&#xa;CTT_result.add(CTT_TimeTag);&#xa;CTT_result.add(CTT_isAllInstances);&#xa;;CTT_result" valueType="string"/>
                </object>
            </property>
        </object>
    </property>
</object>