<object stamp="7a265601-3bd0-4d2e-af5d-cc65fb237182_1640260289093" type="UserDefinedFunction" version="2.0">
    <property name="objectId" value="fec4dd53-469a-4a88-94c8-41a0edb9ea10" valueType="string"/>
    <property name="branchId" value="UDFs" valueType="string"/>
    <property name="name" value="ppc_ListConditionFormatting" valueType="string"/>
    <property name="description" value="2021.02.14" valueType="string"/>
    <property name="arguments" valueType="table">
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="LCF_jbook" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="LCF_PPCTable" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="LCF_nameSheetConditionalFormatting" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="LCF_mode" valueType="string"/>
            <property name="description" value="" valueType="string"/>
        </object>
    </property>
    <property name="body" valueType="object">
        <object type="ASLExpression" version="1.0">
            <property name="expression" valueType="table">
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="&lt;!--&#xa;Copyright by AXIOM SL, Igor Kirilyuk&#xa;Version of 2021.02.14&#xa;Get list condition formatting&#xa;Input variables:&#xa;LCF_jbook - &#xa;LCF_PPCTable - &#xa;LCF_nameSheetConditionalFormatting - &#xa;LCF_mode - &#xa;-->&#xa;trace(&quot;#!#!#! ppc_ListConditionFormatting. Started #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_ListConditionFormatting. Copyright by AXIOM SL, Igor Kirilyuk, 2021.02.14 #!#!#!&quot;);&#xa;&#xa;var LCF_startDate = new(&quot;java.util.Date&quot;);&#xa;&#xa;var LCF_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, &quot;PPCDelimiter&quot;);&#xa;var LCF_separatorListSheets = if((LCF_cellReference != null) and !LCF_jbook.getText(LCF_cellReference.get(0), LCF_cellReference.get(1), LCF_cellReference.get(2)).trim().isEmpty(), LCF_jbook.getText(LCF_cellReference.get(0), LCF_cellReference.get(1), LCF_cellReference.get(2)).trim(), &quot;,&quot;);&#xa;trace(&quot;#!#!#! ppc_ListConditionFormatting. The sheet list separator symbol - '&quot; + LCF_separatorListSheets + &quot;' #!#!#!&quot;);&#xa;&#xa;var LCF_listParametersPPCTable = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_ListParametersPPCTable"{1db7a4eb-bf3a-41c4-82f8-b5f1b904e1fa}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_PPCTable, LCF_mode);&#xa;&#xa;LCF_cellReference = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_nameSheetConditionalFormatting + &quot;!A1&quot;);&#xa;&lt;if> LCF_cellReference != null&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Deleting an existing conditional formatting sheet '&quot; + LCF_nameSheetConditionalFormatting + &quot;' ... #!#!#!&quot;);&#xa;&#x9;&#x9;&lt;try>&#xa;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_cellReference.get(0));&#xa;&#x9;&#x9;&#x9;&lt;if> (LCF_jbook.getLastRow() &amp;gt;= 0) or (LCF_jbook.getLastCol() &amp;gt;= 0)&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.clearRange(0, 0, LCF_jbook.getLastRow(), LCF_jbook.getLastCol(), LCF_jbook.eClearAll);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;LCF_jbook.deleteSheets(LCF_cellReference.get(0), 1);&#xa;&#x9;&#x9;&lt;catch> var ex &lt;/catch>&#xa;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Error delete sheet '&quot; + LCF_nameSheetConditionalFormatting + &quot;' #!#!#!&quot;);&#xa;&#x9;&#x9;&lt;/try>&#x9;&#xa;&#x9;&lt;/then>&#xa;&lt;/if>&#xa;&#xa;trace(&quot;#!#!#! ppc_ListConditionFormatting. Create conditional formatting sheet '&quot; + LCF_nameSheetConditionalFormatting + &quot;' ... #!#!#!&quot;);&#xa;var LCF_indexSheetConditionFormatting = LCF_jbook.getNumSheets();&#xa;&lt;try>&#xa;&#x9;LCF_jbook.insertSheets(LCF_indexSheetConditionFormatting, 1);&#xa;&#x9;LCF_jbook.setSheetName(LCF_indexSheetConditionFormatting, LCF_nameSheetConditionalFormatting);&#xa;&lt;catch> var ex &lt;/catch>&#xa;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Error create sheet '&quot; + LCF_nameSheetConditionalFormatting + &quot;' #!#!#!&quot;);&#xa;&lt;/try>&#x9;&#xa;&#xa;var LCF_listConditionFormat = Map();&#xa;&lt;if> !LCF_PPCTable.isEmpty()&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;var LCF_offsetToConditionFormattingSheet = 0;&#xa;&#x9;&#x9;&lt;case>&#xa;&#x9;&#x9;&#x9;LCF_mode == 1&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Table: ExtendRows #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_Sheet = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_SheetADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_StartRow = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_StartColumn = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_ConditionColumn = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_OffsetTemplateRow = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_Condition = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_SQL = 7;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_NumberFirstRowsToExtend = 8;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_PrintArea = 9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_OffsetTemplateName = 10;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_IndexSQLFieldSubTotal = 11;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_IndexTemplateRowSubTotalAndName = 12;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_OffsetGrandTotalRow = 13;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_CSVColumn = 14;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_CSVCellName = 15;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendRows_ListParameters = 16;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats main area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_StartRow));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetTemplateRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_OffsetTemplateRow));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetGrandTotalRow = if(!LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_OffsetGrandTotalRow).isEmpty(), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).get(0)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listStartColumn = LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_StartColumn).split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_Sheet) + if(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_SheetADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendRows_SheetADJ))).split(LCF_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexStartColumn = 0 &lt;comma/> indexStartColumn &amp;lt; LCF_listStartColumn.size() &lt;comma/> indexStartColumn++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_charStartColumn = LCF_listStartColumn.get(indexStartColumn).split(&quot;:&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexStartColumn = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnIndex"{bcc991db-7e5c-4a82-8574-8f254ff2e73d}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_charStartColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexStopColumn = if(LCF_listStartColumn.get(0).split(&quot;:&quot;).size() == 3, LCF_indexStartColumn + (class(&quot;java.lang.Integer&quot;).parseInt(LCF_listStartColumn.get(0).split(&quot;:&quot;).get(2)) - 1), LCF_jbook.getLastCol());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats template row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + LCF_indexStartColumn + &quot;:&quot; + &quot;''&quot;, array(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_indexStartColumn, LCF_offsetToConditionFormattingSheet, LCF_indexStopColumn));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_indexStartColumn, LCF_offsetToConditionFormattingSheet, LCF_indexStopColumn, LCF_jbook, LCF_indexSheet, (LCF_startRow - 1) + (LCF_offsetTemplateRow - 1), LCF_indexStartColumn, (LCF_startRow - 1) + (LCF_offsetTemplateRow - 1), LCF_indexStopColumn, LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection((LCF_startRow - 1), LCF_indexStartColumn, (LCF_startRow - 1) + (LCF_offsetTemplateRow - 1), LCF_indexStopColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet++;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats grand total row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> LCF_offsetGrandTotalRow != -1&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + LCF_indexStartColumn + &quot;:&quot; + &quot;'GRANDTOTAL'&quot;, array(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_indexStartColumn, LCF_offsetToConditionFormattingSheet, LCF_indexStopColumn));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_indexStartColumn, LCF_offsetToConditionFormattingSheet, LCF_indexStopColumn, LCF_jbook, LCF_indexSheet, (LCF_startRow - 1) + (LCF_offsetGrandTotalRow - 1), LCF_indexStartColumn, (LCF_startRow - 1) + (LCF_offsetGrandTotalRow - 1), LCF_indexStopColumn, LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection((LCF_startRow - 1) + (LCF_offsetGrandTotalRow - 1), LCF_indexStartColumn, (LCF_startRow - 1) + (LCF_offsetGrandTotalRow - 1), LCF_indexStopColumn);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet++;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats static area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexPPCTable = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> &lt;comma/> LCF_indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var _indexTable = -1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var _indexPPCTable = LCF_indexPPCTable;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> &lt;comma/> (_indexPPCTable &amp;lt; LCF_PPCTable.size()) and (LCF_PPCTable.get(LCF_indexPPCTable).get(LCF_PPCTableExtendRows_Sheet).equals(LCF_PPCTable.get(_indexPPCTable).get(LCF_PPCTableExtendRows_Sheet))) and (class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(LCF_indexPPCTable).get(LCF_PPCTableExtendRows_StartRow)) == class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(_indexPPCTable).get(LCF_PPCTableExtendRows_StartRow))) &lt;comma/>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_conditionFormatting = LCF_listParametersPPCTable.get(_indexPPCTable).get(&quot;CONDITIONFORMATTING&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_indexTable = if((LCF_conditionFormatting != null) and !LCF_conditionFormatting.isEmpty(), _indexPPCTable, _indexTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_indexPPCTable++;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_indexTable = if(_indexTable == -1, _indexPPCTable - 1, _indexTable);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_StartRow));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetTemplateRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetTemplateRow));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetTemplateName = if(!LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetTemplateName).isEmpty(), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetTemplateName).split(&quot;:&quot;).get(0)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetGrandTotalRow = if(!LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetGrandTotalRow).isEmpty(), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).get(0)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetGrandTotalName = if(!LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetGrandTotalRow).isEmpty() and (LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).size() &amp;gt;= 2), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_OffsetGrandTotalRow).split(&quot;:&quot;).get(1)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listStartColumn = LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_StartColumn).split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_Sheet) + if(LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_SheetADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(_indexTable).get(LCF_PPCTableExtendRows_SheetADJ))).split(LCF_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listParameters = LCF_listParametersPPCTable.get(_indexTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var _offsetStartRow;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_conditionFormatting = LCF_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (LCF_conditionFormatting != null) and !LCF_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + LCF_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + if(LCF_conditionFormatting.split(&quot;-&quot;).size() &amp;gt;= 2, LCF_conditionFormatting.split(&quot;-&quot;).get(1), LCF_conditionFormatting.split(&quot;-&quot;).get(0)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_offsetStartRow = LCF_startRange.get(1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A&quot; + LCF_startRow);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_jbook.getLastCol()) + (LCF_jbook.getLastRow() + 1));&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var keysListConditionFormat = LCF_listConditionFormat.keySet().toArray();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var index = 0 &lt;comma/> index &amp;lt; keysListConditionFormat.size() &lt;comma/> index++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_indexSheet = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_startRow = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_marker = keysListConditionFormat.get(index).split(&quot;:&quot;).get(4);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> key_indexSheet == LCF_indexSheet&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> ((key_startRow - 1) &amp;lt; LCF_stopRange.get(1)) and (key_startRow &amp;gt; LCF_startRow) and !&quot;'STATICAREA'&quot;.equals(key_marker)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_jbook.getLastCol()) + (key_startRow - 1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_offsetStartRow = LCF_startRange.get(1) + Max(LCF_offsetTemplateRow, Max(LCF_offsetTemplateName, Max(LCF_offsetGrandTotalRow, LCF_offsetGrandTotalName)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> LCF_stopRange.get(1) &amp;gt;= _offsetStartRow&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(_indexTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + &quot;0&quot; + &quot;:&quot; + &quot;'STATICAREA'&quot;, array(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_startRange.get(2), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - _offsetStartRow), LCF_stopRange.get(2)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_startRange.get(2), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - _offsetStartRow), LCF_stopRange.get(2), LCF_jbook, LCF_indexSheet, _offsetStartRow, LCF_startRange.get(2), LCF_stopRange.get(1), LCF_stopRange.get(2), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(_offsetStartRow, LCF_startRange.get(2), LCF_stopRange.get(1), LCF_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet = LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - _offsetStartRow) + 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_indexPPCTable = _indexPPCTable;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;LCF_mode == 2&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Table: ExtendCols #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Not implemented #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;LCF_mode == 3&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Table: ExtendColsEX #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_Sheet = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_SheetADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_StartRow = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_StartColumn = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_ConditionColumn = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_OffsetTemplateColumn = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_Condition = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_SQL = 7;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_NumberFirstColsToExtend = 8;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_PrintArea = 9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_OffsetTemplateNames = 10;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_IndexSQLFieldSubTotal = 11;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_IndexTemplateColSubTotalAndNames = 12;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_OffsetGrandTotalColumn = 13;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_CSVColumn = 14;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_CSVCellName = 15;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendCols_ListParameters = 16;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats main area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_StartRow));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetTemplateColumn = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetTemplateColumn));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetGrandTotalColumn = if(!LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetGrandTotalColumn).isEmpty(), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetGrandTotalColumn).split(&quot;:&quot;).get(0)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_Sheet) + if(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_SheetADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_SheetADJ))).split(LCF_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listStartColumn = LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_StartColumn).split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumns = LCF_listStartColumn.size() - 1 &lt;comma/> indexColumns &amp;gt;= 0 &lt;comma/> indexColumns--&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_charColumn = LCF_listStartColumn.get(indexColumns).split(&quot;:&quot;).get(0).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startColumn = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + LCF_charColumn + &quot;1&quot;).get(2);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats template row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + LCF_startColumn + &quot;:&quot; + &quot;''&quot;, array(LCF_indexSheetConditionFormatting, 0, LCF_offsetToConditionFormattingSheet, LCF_jbook.getLastRow(), LCF_offsetToConditionFormattingSheet));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, 0, LCF_offsetToConditionFormattingSheet, LCF_jbook.getLastRow(), LCF_offsetToConditionFormattingSheet, LCF_jbook, LCF_indexSheet, 0, LCF_startColumn + (LCF_offsetTemplateColumn - 1), LCF_jbook.getLastRow(), LCF_startColumn + (LCF_offsetTemplateColumn - 1), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection((LCF_startRow - 1), LCF_startColumn + (LCF_offsetTemplateColumn - 1), LCF_jbook.getLastRow(), LCF_startColumn + (LCF_offsetTemplateColumn - 1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet++;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats grand total row -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> LCF_offsetGrandTotalColumn != -1&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + LCF_startColumn + &quot;:&quot; + &quot;'GRANDTOTAL'&quot;, array(LCF_indexSheetConditionFormatting, 0, LCF_offsetToConditionFormattingSheet, LCF_jbook.getLastRow(), LCF_offsetToConditionFormattingSheet));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, 0, LCF_offsetToConditionFormattingSheet, LCF_jbook.getLastRow(), LCF_offsetToConditionFormattingSheet, LCF_jbook, LCF_indexSheet, 0, LCF_startColumn + (LCF_offsetGrandTotalColumn - 1), LCF_jbook.getLastRow(), LCF_startColumn + (LCF_offsetGrandTotalColumn - 1), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection((LCF_startRow - 1), LCF_startColumn + (LCF_offsetGrandTotalColumn - 1), LCF_jbook.getLastRow(), LCF_startColumn + (LCF_offsetGrandTotalColumn - 1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet++;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats static area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_StartRow));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetTemplateColumn = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetTemplateColumn));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetTemplateName = if(!LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetTemplateNames).isEmpty(), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetTemplateNames).split(&quot;:&quot;).get(0)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetGrandTotalColumn = if(!LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetGrandTotalColumn).isEmpty(), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetGrandTotalColumn).split(&quot;:&quot;).get(0)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_offsetGrandTotalName = if(!LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetGrandTotalColumn).isEmpty() and (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetGrandTotalColumn).split(&quot;:&quot;).size() &amp;gt;= 2), class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_OffsetGrandTotalColumn).split(&quot;:&quot;).get(1)), -1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listStartColumn = LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_StartColumn).split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_Sheet) + if(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_SheetADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendCols_SheetADJ))).split(LCF_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listParameters = LCF_listParametersPPCTable.get(indexPPCTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexColumns = LCF_listStartColumn.size() - 1 &lt;comma/> indexColumns &amp;gt;= 0 &lt;comma/> indexColumns--&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_charColumn = LCF_listStartColumn.get(indexColumns).split(&quot;:&quot;).get(0).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startColumn = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + LCF_charColumn + &quot;1&quot;).get(2);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var _offsetStartColumn = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_conditionFormatting = LCF_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (LCF_conditionFormatting != null) and !LCF_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + LCF_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + if(LCF_conditionFormatting.split(&quot;-&quot;).size() &amp;gt;= 2, LCF_conditionFormatting.split(&quot;-&quot;).get(1), LCF_conditionFormatting.split(&quot;-&quot;).get(0)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_offsetStartColumn = LCF_startRange.get(2);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + LCF_charColumn + &quot;1&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_jbook.getLastCol()) + (LCF_jbook.getLastRow() + 1));&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var keysListConditionFormat = LCF_listConditionFormat.keySet().toArray();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var index = 0 &lt;comma/> index &amp;lt; keysListConditionFormat.size() &lt;comma/> index++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_indexSheet = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_startRow = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_startColumn = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(3));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_marker = keysListConditionFormat.get(index).split(&quot;:&quot;).get(4);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> key_indexSheet == LCF_indexSheet&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (key_startColumn &amp;lt; LCF_stopRange.get(2)) and (key_startColumn &amp;gt; LCF_startColumn) and !&quot;'STATICAREA'&quot;.equals(key_marker)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, key_startColumn - 1) + (LCF_jbook.getLastRow() + 1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_offsetStartColumn = LCF_startRange.get(2) + Max(LCF_offsetTemplateColumn, Max(LCF_offsetTemplateName, Max(LCF_offsetGrandTotalColumn, LCF_offsetGrandTotalName)));&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> LCF_stopRange.get(2) &amp;gt;= _offsetStartColumn&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + LCF_startColumn + &quot;:&quot; + &quot;'STATICAREA'&quot;, array(LCF_indexSheetConditionFormatting, LCF_startRange.get(1), LCF_offsetToConditionFormattingSheet, LCF_stopRange.get(1), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(2) - _offsetStartColumn)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_startRange.get(1), LCF_offsetToConditionFormattingSheet, LCF_stopRange.get(1), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(2) - _offsetStartColumn), LCF_jbook, LCF_indexSheet, LCF_startRange.get(1), _offsetStartColumn, LCF_stopRange.get(1), LCF_stopRange.get(2), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(LCF_startRange.get(1), _offsetStartColumn, LCF_stopRange.get(1), LCF_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet = LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(2) - _offsetStartColumn) + 1;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;LCF_mode == 4&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Table: ExtendBlocks #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_Sheets = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_SheetsADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_StartRowBlock = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_StopRowBlock = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_InsertRowBlock = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_AddressCellNumberBlock = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_SQL = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlocks_ListParameters = 7;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats block area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_StartRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_StopRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_Sheets) + if(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_SheetsADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_SheetsADJ))).split(LCF_separatorListSheets);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + &quot;0&quot; + &quot;:&quot; + &quot;''&quot;, array(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, 0, LCF_offsetToConditionFormattingSheet + (LCF_stopRow - LCF_startRow), LCF_jbook.getLastCol()));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, 0, LCF_offsetToConditionFormattingSheet + (LCF_stopRow - LCF_startRow), LCF_jbook.getLastCol(), LCF_jbook, LCF_indexSheet, LCF_startRow - 1, 0, LCF_stopRow - 1, LCF_jbook.getLastCol(), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(LCF_startRow - 1, 0, LCF_stopRow - 1, LCF_jbook.getLastCol());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet = LCF_offsetToConditionFormattingSheet + (LCF_stopRow - LCF_startRow) + 1;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats static area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_StartRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_StopRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_Sheets) + if(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_SheetsADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_SheetsADJ))).split(LCF_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listParameters = LCF_listParametersPPCTable.get(indexPPCTable);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_conditionFormatting = LCF_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (LCF_conditionFormatting != null) and !LCF_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + LCF_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + if(LCF_conditionFormatting.split(&quot;-&quot;).size() &amp;gt;= 2, LCF_conditionFormatting.split(&quot;-&quot;).get(1), LCF_conditionFormatting.split(&quot;-&quot;).get(0)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A&quot; + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlocks_InsertRowBlock));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_jbook.getLastCol()) + (LCF_jbook.getLastRow() + 1));&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var keysListConditionFormat = LCF_listConditionFormat.keySet().toArray();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var index = 0 &lt;comma/> index &amp;lt; keysListConditionFormat.size() &lt;comma/> index++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_indexSheet = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_startRow = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_marker = keysListConditionFormat.get(index).split(&quot;:&quot;).get(4);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> key_indexSheet == LCF_indexSheet&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> ((key_startRow - 1) &amp;lt; LCF_stopRange.get(1)) and (key_startRow &amp;gt; LCF_stopRow) and !&quot;'STATICAREA'&quot;.equals(key_marker)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_jbook.getLastCol()) + (key_startRow - 1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> LCF_stopRange.get(1) &amp;gt;= LCF_startRange.get(1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + &quot;0&quot; + &quot;:&quot; + &quot;'STATICAREA'&quot;, array(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_startRange.get(2), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - LCF_startRange.get(1)), LCF_stopRange.get(2)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_startRange.get(2), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - LCF_startRange.get(1)), LCF_stopRange.get(2), LCF_jbook, LCF_indexSheet, LCF_startRange.get(1), LCF_startRange.get(2), LCF_stopRange.get(1), LCF_stopRange.get(2), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(LCF_startRange.get(1), LCF_startRange.get(2), LCF_stopRange.get(1), LCF_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet = LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - LCF_startRange.get(1)) + 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;LCF_mode == 5&#xa;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Table: ExtendBlockInBlockEX #!#!#!&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_Sheet = 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_SheetADJ = 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_ExternalRangeBlock_start = 2;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop = 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_ExternalSQL = 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_ColumnConditionExternalBlock = 5;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_InternalRangeBlock_start = 6;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_InternalRangeBlock_stop = 7;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_InternalSQL = 8;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_ColumnConditionInternalBlock = 9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_PPCTableExtendBlockInBlock_ListParameters = 10;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats block area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_ExternalRangeBlock_start));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_Sheet) + if(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_SheetADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_SheetADJ))).split(LCF_separatorListSheets);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + &quot;0&quot; + &quot;:&quot; + &quot;''&quot;, array(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, 0, LCF_offsetToConditionFormattingSheet + (LCF_stopRow - LCF_startRow), LCF_jbook.getLastCol()));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, 0, LCF_offsetToConditionFormattingSheet + (LCF_stopRow - LCF_startRow), LCF_jbook.getLastCol(), LCF_jbook, LCF_indexSheet, LCF_startRow - 1, 0, LCF_stopRow - 1, LCF_jbook.getLastCol(), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(LCF_startRow - 1, 0, LCF_stopRow - 1, LCF_jbook.getLastCol());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet = LCF_offsetToConditionFormattingSheet + (LCF_stopRow - LCF_startRow) + 1;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;!-- Get conditional formats static area -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexPPCTable = 0 &lt;comma/> indexPPCTable &amp;lt; LCF_PPCTable.size() &lt;comma/> indexPPCTable++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_ExternalRangeBlock_start));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRow = class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listSheets = (LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_Sheet) + if(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_SheetADJ).isEmpty(), &quot;&quot;,  LCF_separatorListSheets + LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_SheetADJ))).split(LCF_separatorListSheets);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_listParameters = LCF_listParametersPPCTable.get(indexPPCTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_conditionFormatting = LCF_listParameters.get(&quot;CONDITIONFORMATTING&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var indexSheet = 0 &lt;comma/> indexSheet &amp;lt; LCF_listSheets.size() &lt;comma/> indexSheet++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_indexSheet = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A1&quot;).get(0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSheet(LCF_indexSheet);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_startRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var LCF_stopRange;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (LCF_conditionFormatting != null) and !LCF_conditionFormatting.isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + LCF_conditionFormatting.split(&quot;-&quot;).get(0));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + if(LCF_conditionFormatting.split(&quot;-&quot;).size() &amp;gt;= 2, LCF_conditionFormatting.split(&quot;-&quot;).get(1), LCF_conditionFormatting.split(&quot;-&quot;).get(0)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_startRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!A&quot; + (class(&quot;java.lang.Integer&quot;).parseInt(LCF_PPCTable.get(indexPPCTable).get(LCF_PPCTableExtendBlockInBlock_ExternalRangeBlock_stop)) + 1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_jbook.getLastCol()) + (LCF_jbook.getLastRow() + 1));&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var keysListConditionFormat = LCF_listConditionFormat.keySet().toArray();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var index = 0 &lt;comma/> index &amp;lt; keysListConditionFormat.size() &lt;comma/> index++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_indexSheet = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_startRow = class(&quot;java.lang.Integer&quot;).parseInt(keysListConditionFormat.get(index).split(&quot;:&quot;).get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var key_marker = keysListConditionFormat.get(index).split(&quot;:&quot;).get(4);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> key_indexSheet == LCF_indexSheet&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> ((key_startRow - 1) &amp;lt; LCF_stopRange.get(1)) and (key_startRow &amp;gt; LCF_stopRow) and !&quot;'STATICAREA'&quot;.equals(key_marker)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_stopRange = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_CellReference"{c683f240-66ab-48e2-b6a5-6958579d8c98}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_listSheets.get(indexSheet).trim() + &quot;!&quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_GetColumnChar"{30abcc8f-7bf6-447f-9915-aa980f28def5}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_jbook, LCF_jbook.getLastCol()) + (key_startRow - 1));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> LCF_stopRange.get(1) &amp;gt;= LCF_startRange.get(1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_listConditionFormat.put(indexPPCTable + &quot;:&quot; + LCF_indexSheet + &quot;:&quot; + LCF_startRow + &quot;:&quot; + &quot;0&quot; + &quot;:&quot; + &quot;'STATICAREA'&quot;, array(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_startRange.get(2), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - LCF_startRange.get(1)), LCF_stopRange.get(2)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.copyRange(LCF_indexSheetConditionFormatting, LCF_offsetToConditionFormattingSheet, LCF_startRange.get(2), LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - LCF_startRange.get(1)), LCF_stopRange.get(2), LCF_jbook, LCF_indexSheet, LCF_startRange.get(1), LCF_startRange.get(2), LCF_stopRange.get(1), LCF_stopRange.get(2), LCF_jbook.eCopyFormats);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(LCF_startRange.get(1), LCF_startRange.get(2), LCF_stopRange.get(1), LCF_stopRange.get(2));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setConditionalFormats(null);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_jbook.setSelection(0, 0, 0, 0);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LCF_offsetToConditionFormattingSheet = LCF_offsetToConditionFormattingSheet + (LCF_stopRange.get(1) - LCF_startRange.get(1)) + 1;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/case>&#xa;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Defined &quot; + LCF_listConditionFormat.size() + &quot; item(s) #!#!#!&quot;);&#xa;&#x9;&lt;/then>&#xa;&#x9;&lt;else>&#xa;&#x9;&#x9;trace(&quot;#!#!#! ppc_ListConditionFormatting. Table is empty #!#!#!&quot;);&#xa;&#x9;&lt;/else>&#xa;&lt;/if>&#x9;&#xa;trace(&quot;#!#!#! ppc_ListConditionFormatting. &quot; + " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["ppc_RunTime"{01bdef00-6989-424b-84f9-c81ca2885e47}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(LCF_startDate, new(&quot;java.util.Date&quot;)) + &quot; #!#!#!&quot;);&#xa;trace(&quot;#!#!#! ppc_ListConditionFormatting. Finished #!#!#!&quot;);&#xa;; LCF_listConditionFormat" valueType="string"/>
                </object>
            </property>
        </object>
    </property>
</object>