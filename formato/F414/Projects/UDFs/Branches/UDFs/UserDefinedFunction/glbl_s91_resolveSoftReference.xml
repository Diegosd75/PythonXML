<object stamp="ad5920ee-b70f-4dfa-87d2-80ee092ddc2d_1536239399207" type="UserDefinedFunction" version="2.0">
    <property name="objectId" value="706bd8c0-bd0f-4e43-8a18-d53018266a82" valueType="string"/>
    <property name="branchId" value="UDFs" valueType="string"/>
    <property name="name" value="glbl_s91_resolveSoftReference" valueType="string"/>
    <property name="description" value="Rezolve SoftDependent branch ID" valueType="string"/>
    <property name="arguments" valueType="table">
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_s91RSR_branchName" valueType="string"/>
            <property name="description" value="Full branch name" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_s91RSR_depAlias" valueType="string"/>
            <property name="description" value="Dependency alias" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_s91RSR_timeTag" valueType="string"/>
            <property name="description" value="TIME_TAG" valueType="string"/>
        </object>
    </property>
    <property name="body" valueType="object">
        <object type="ASLExpression" version="1.0">
            <property name="expression" valueType="table">
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="&lt;!--&#xa;&#x9;https://axiomsl.us/jira/browse/SCRIPT-91&#xa;&#xa;&#x9;glbl_s91_resolveSoftReference with prefix: S91RSR_&#xa;&#xa;&#x9;Oleksiy Frizyuk 2017.10.03&#xa;&#x9;&#x9;First release&#xa;&#x9;Oleksiy Frizyuk 2018.04.26&#xa;&#x9;&#x9;Created code for v10 and added speciall comment blocks that will be processed by conversion rules on import stage in v10&#xa;&#x9;Oleksiy Frizyuk 2018.09.06&#xa;&#x9;&#x9;Changed method to resolving soft dep from 10.0.12&#xa;&#xa;&#x9;Rezolve SoftDependent branch ID&#xa;&#xa;&#x9;Input variables: &#xa;&#x9;var_s91RSR_branchName - Full branch name&#xa;&#x9;var_s91RSR_depAlias - Dependency alias&#xa;&#x9;var_s91RSR_timeTag - TIME_TAG&#xa;-->&#xa;&#xa;trace(&quot;#!#!#! glbl_s91_resolveSoftReference: Started&quot;);&#xa;trace(&quot;#!#!#! S91RSR: var_s91RSR_branchName[&quot; + var_s91RSR_branchName + &quot;] var_s91RSR_depAlias[&quot; + var_s91RSR_depAlias + &quot;], &quot; +&#xa;&#x9;&#x9;&quot;var_s91RSR_timeTag[&quot; + var_s91RSR_timeTag.getDate(&quot;instanceDate&quot;) + &quot;, &quot; + var_s91RSR_timeTag +&quot;]&quot;);&#xa;&#xa;var S91RSR_branchID = null;&#xa;var S91RSR_dep = null;&#xa;&#xa;var S91RSR_branchObject = ObjectID.createNameId(&quot;Branch&quot;, null, var_s91RSR_branchName);&#xa;&lt;if> axiomObjectManager.objectExists(S91RSR_branchObject, axiomEnvironment)&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;S91RSR_branchObject = axiomObjectManager.locate(S91RSR_branchObject, axiomEnvironment);&#xa;&#x9;&#x9;S91RSR_dep = axiomObjectManager.locate(ObjectID.createId(&quot;BranchDependencies&quot;, S91RSR_branchObject.getId(), &quot;BranchDependencies&quot;), axiomEnvironment.setOneProperty(class(&quot;com.axiomsl.framework.api.server.FrameworkAxiomEnvironmentConstants&quot;).ALLOW_LOCATE_INVALID, true)).getTable(&quot;dependencies&quot;).locateByPropertyIfExists(var_s91RSR_depAlias, &quot;name&quot;);&#xa;&#x9;&#x9;&lt;if> S91RSR_dep == null&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;warningMessage(&quot;#!#!#! S91RSR: DepAlais[&quot; + var_s91RSR_depAlias + &quot;] does not exist&quot;);&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/if>&#xa;&#x9;&lt;/then>&#xa;&#x9;&lt;else>&#xa;&#x9;&#x9;warningMessage(&quot;#!#!#! S91RSR: Branch[&quot; + var_s91RSR_branchName + &quot;] does not exist&quot;);&#xa;&#x9;&lt;/else>&#xa;&lt;/if>&#xa;&lt;if> var_s91RSR_timeTag == null OR var_s91RSR_timeTag instanceof &quot;java.lang.String&quot;&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;warningMessage(&quot;#!#!#! S91RSR: Input TIME_TAG is not TIME_TAG object&quot;);&#xa;&#x9;&#x9;S91RSR_dep = null;&#xa;&#x9;&lt;/then>&#xa;&lt;/if>&#xa;&#xa;&lt;if> S91RSR_dep != null&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;var S91RSR_branchExpression = null;&#xa;&#x9;&#x9;&lt;if> S91RSR_dep.propertyIsSet(&quot;branchExpression&quot;)&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_branchExpression = ModuleRouter.getImpl(class(&quot;com.axiomsl.parser.api.asl.ASLExpressionService_1&quot;), axiomEnvironment).serializeToString(S91RSR_dep.getObject(&quot;branchExpression&quot;), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&lt;if> S91RSR_branchExpression != null AND NOT S91RSR_branchExpression.isEmpty()&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&lt;!-- Should be removed in v10 Start&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_tags = list();&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tags.addAll(class(&quot;axiomsl.server.common.tags.TagFactory&quot;).createAdditionalTags(axiomEnvironment));&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tags.addAll(axiomObjectManager.getCachedTags());&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tags.add(new(&quot;axiomsl.util.xml.DynamicConstantValueTag&quot;, var_s91RSR_timeTag, &quot;TIME_TAG&quot;, false));&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_evaluationContext = new(&quot;axiomsl.util.xml.EvaluationContext&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_evaluationContext.setProperty(class(&quot;axiomsl.util.xml.EvaluationContext&quot;).AXIOM_OBJECT_MANAGER, axiomObjectManager);&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_evaluationContext.setProperty(class(&quot;axiomsl.util.xml.EvaluationContext&quot;).BRANCH_ID, S91RSR_branchObject.getId());&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_evaluationContext.setProperty(class(&quot;axiomsl.util.xml.EvaluationContext&quot;).AXIOM_ENVIRONMENT, axiomEnvironment);&#xa;Should be removed in v10 Finish -->&#xa;&#x9;&#x9;&#x9;&#x9;&lt;!-- When thil line was wrote EVAL_MODE_ON was 0 and EVAL_MODE_SUPPORT_SINGLE_EQUALITY_SIGN - 16 -->&#xa;&lt;!-- Should be removed in v10 Start&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_evaluatingTag = class(&quot;axiomsl.util.xml.XMLScriptParser&quot;).parseFreehand(S91RSR_branchExpression, S91RSR_tags,&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;class(&quot;axiomsl.util.xml.XMLScriptParser&quot;).EVAL_MODE_ON + class(&quot;axiomsl.util.xml.XMLScriptParser&quot;).EVAL_MODE_SUPPORT_SINGLE_EQUALITY_SIGN,&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S91RSR_evaluationContext);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_evaluateResult = S91RSR_evaluatingTag.getEvaluateResult(S91RSR_evaluationContext);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> S91RSR_evaluateResult != null AND S91RSR_evaluateResult instanceof &quot;java.lang.String&quot;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S91RSR_branchID = S91RSR_evaluateResult;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;warningMessage(&quot;#!#!#! S91RSR: Check your branch id expression [&quot; + S91RSR_branchExpression + &quot;]&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;Should be removed in v10 Finish -->&#xa;&lt;!-- Old v10 realisation&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_rrp = axiomEnvironment.getProperty(class(&quot;com.axiomsl.server.AxiomEnvironment&quot;).RRP);&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_parserService = ModuleRouter.getImpl(class(&quot;com.axiomsl.parser.api.ParserService_1&quot;), S91RSR_branchObject.createDbID(), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_syntaxService = ModuleRouter.getImpl(class(&quot;com.axiomsl.parser.api.asl.ASLService_1&quot;), S91RSR_branchObject.createDbID(), axiomEnvironment);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_syntax = S91RSR_syntaxService.getSyntaxBuilder()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.setAllowedSymbolForIdentifierStart(&quot;#&quot;.charAt(0))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.setAllowedSymbolInIdentifier(&quot;#&quot;.charAt(0))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.setAllowedSymbolInIdentifier(&quot;:&quot;.charAt(0))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.setEqualsSignAsComparison().build();&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_udfService = ModuleRouter.getImpl(class(&quot;com.axiomsl.udf.api.common.UDFService_1&quot;), S91RSR_branchObject.createDbID(), axiomEnvironment);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_tagBuilder = S91RSR_syntaxService.createEmptyDescriptorCollectionBuilder();&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tagBuilder.add(S91RSR_udfService.createUDFTag(S91RSR_branchObject.createDbID().getDbId(), axiomEnvironment));&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tagBuilder.addCollection(S91RSR_syntaxService.getAdditionalTags(axiomEnvironment).build());&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tagBuilder.addDynamicConstant(S91RSR_rrp.getProperty(&quot;TIME_TAG&quot;), &quot;TIME_TAG&quot;, false);&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tagBuilder.addDynamicConstant(S91RSR_branchObject.getId(), &quot;BRANCH_ID&quot;, false);&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_tagBuilder.addDynamicConstant(var_s91RSR_depAlias, &quot;DEPENDENCY_ALIAS&quot;, false);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_evaluationContext = S91RSR_parserService.createEvaluationContext(axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_evaluationContext.setProperty(class(&quot;com.axiomsl.parser.api.context.EvaluationContext_1&quot;).AXIOM_OBJECT_MANAGER, axiomObjectManager);&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_evaluationContext.setProperty(class(&quot;com.axiomsl.parser.api.context.EvaluationContext_1&quot;).BRANCH_ID, S91RSR_branchObject.getId());&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_evaluationContext.setProperty(class(&quot;com.axiomsl.parser.api.context.EvaluationContext_1&quot;).AXIOM_ENVIRONMENT, axiomEnvironment);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_evaluatingTag = S91RSR_parserService.parse(S91RSR_syntax, S91RSR_branchExpression, S91RSR_tagBuilder, S91RSR_parserService.createEvaluatingModeBuilder().setOptimizedForEvaluation().build(), S91RSR_evaluationContext, axiomEnvironment);&#xa;-->&#xa;&lt;!-- For v10 Start -->&#xa;&#x9;&#x9;&#x9;&#x9;var S91RSR_depService = ModuleRouter.getImpl(class(&quot;com.axiomsl.framework.api.BranchDependencyResolverService_1&quot;), S91RSR_branchObject.createDbID(), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_branchID = S91RSR_depService.getBranchIdByAlias(S91RSR_branchObject.getId(), var_s91RSR_depAlias, axiomEnvironment);&#xa;&lt;!-- For v10 Finish -->&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;S91RSR_branchID = S91RSR_dep.getReference(&quot;branch&quot;).getTargetObjectIDFromElement(0);&#xa;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&lt;/if>&#xa;&#x9;&lt;/then>&#xa;&lt;/if>&#xa;&#xa;trace(&quot;#!#!#! glbl_s91_resolveSoftReference: Finished&quot;);&#xa;;S91RSR_branchID" valueType="string"/>
                </object>
            </property>
        </object>
    </property>
</object>