<object stamp="1db8b2aa-86d3-49d7-9c0d-84de2be91923_1612358801353" type="UserDefinedFunction" version="2.0">
    <property name="objectId" value="11b903f6-accf-456f-8e94-349e7664ad7b" valueType="string"/>
    <property name="branchId" value="UDFs" valueType="string"/>
    <property name="name" value="wfe_s101_createDataSourceInstance" valueType="string"/>
    <property name="description" value="Script create empty instances for all DataSources in specified branch" valueType="string"/>
    <property name="arguments" valueType="table">
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_project_name" valueType="string"/>
            <property name="description" value="Project name" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_branch_name" valueType="string"/>
            <property name="description" value="Branch name" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_object_name" valueType="string"/>
            <property name="description" value="DataSource name. Empty or &quot;*&quot; for all not generated DataSources in Branch. &quot;DataType[*]&quot; for all generated DataSources of specified type, example &quot;Aggregation[*]&quot;." valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_asOfDate" valueType="string"/>
            <property name="description" value="Instance Date. As Date or as String in &quot;dd-MM-yyyy HH:mm:ss&quot; format." valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_key_names" valueType="string"/>
            <property name="description" value="List of key names separated by comma. %% - for empty value" valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_key_values" valueType="string"/>
            <property name="description" value="List of key values separated by comma." valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_overwrite_exists" valueType="string"/>
            <property name="description" value="Overwrite(&quot;Y&quot;) exists instance or not(&quot;N&quot;)." valueType="string"/>
        </object>
        <object type="UserDefinedFunction:argument" version="1.0">
            <property name="name" value="var_S101CDSI_create_adj_table" valueType="string"/>
            <property name="description" value="Create(&quot;Y&quot;) adjustment table or not(&quot;N&quot;)." valueType="string"/>
        </object>
    </property>
    <property name="body" valueType="object">
        <object type="ASLExpression" version="1.0">
            <property name="expression" valueType="table">
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="&lt;!--&#xa;&#x9;https://axiomsl.us/jira/browse/SCRIPT-101&#xa;&#x9;&#xa;&#x9;wfe_s101_createDataSourceInstance with prefix: S101CDSI_&#xa;&#x9;&#xa;&#x9;Dmitry Romanko 2014.07.24&#xa;&#x9;&#x9;First release&#xa;&#x9;Oleksiy Frizyuk 2016.06.14&#xa;&#x9;&#x9;Changed format for instance date from 'dd-MM-yyyy' to 'dd-MM-yyyy HH:mm:ss'&#xa;&#x9;Dmitry Romanko 2016.08.04&#xa;&#x9;&#x9;Add parameter var_S101CDSI_create_adj_table(Y/N) for adjustment table creation&#xa;&#x9;Oleksiy Frizyuk 2018.07.24&#xa;&#x9;&#x9;Changes based on v10 conversion rules&#xa;&#x9;Oleksiy Frizyuk 2019.03.05&#xa;&#x9;&#x9;Cosmetic changes&#xa;&#x9;&#x9;createOrRebuildAdjustmentTable - fixed&#xa;&#x9;Oleksiy Frizyuk 2019.08.01&#xa;&#x9;&#x9;Return java.text.SimpleDateFormat instead date tag, because date tag recognize 'dd-MM-yyyy' date format as 'MM-dd-yyyy'&#xa;&#x9;Oleksiy Frizyuk 2019.09.23&#xa;&#x9;&#x9;Fixed rewriting instance even var_S101CDSI_overwrite_exists not 'Y' value&#xa;&#x9;Oleksiy Frizyuk 2019.09.26&#xa;&#x9;&#x9;Added possibility to set var_S101CDSI_asOfDate as Date type too&#xa;&#x9;Oleksiy Frizyuk 2020.01.14&#xa;&#x9;&#x9;Added possibility to use date tag for date not in 'dd-MM-yyyy HH:mm:ss' format&#xa;&#x9;Oleksiy Frizyuk 2020.03.13&#xa;&#x9;&#x9;Fixed incorrect data in string format&#xa;&#x9;Oleksiy Frizyuk 2020.12.14&#xa;&#x9;&#x9;Returned processing %% values&#xa;&#x9;Oleksiy Frizyuk 2021.01.03&#xa;&#x9;&#x9;Added using glbl_s91_resolveBranchObjectNames&#xa;&#xa;&#x9;Script create empty instances for all DataSources in specified branch with specified asOfDate and instanceKeys.&#xa;&#x9;&#xa;&#x9;Input variables:&#xa;&#x9;var_S101CDSI_project_name - Project name&#xa;&#x9;var_S101CDSI_branch_name - Branch name&#xa;&#x9;var_S101CDSI_object_name - DataSource name. Empty or &quot;*&quot; for all not generated DataSources in Branch. &quot;DataType[*]&quot; for all generated DataSources of specified type, example &quot;Aggregation[*]&quot;. May be specified with dependencies.&#xa;&#x9;var_S101CDSI_asOfDate - Instance Date. As Date or as String in &quot;dd-MM-yyyy HH:mm:ss&quot; format.&#xa;&#x9;var_S101CDSI_key_names - List of key names separated by comma. %% - for empty value&#xa;&#x9;var_S101CDSI_key_values - List of key values separated by comma.&#xa;&#x9;var_S101CDSI_overwrite_exists - Overwrite(&quot;Y&quot;) exists instance or not(&quot;N&quot;). &#xa;&#x9;var_S101CDSI_create_adj_table - Create(&quot;Y&quot;) adjustment table or not(&quot;N&quot;).&#xa;-->&#xa;&#xa;trace(&quot;#!#!#! wfe_s101_CreateDataSourceInstance: Started&quot;);&#xa;trace(&quot;#!#!#! S101CDSI: var_S101CDSI_project_name[&quot; + var_S101CDSI_project_name + &quot;] var_S101CDSI_branch_name[&quot; + var_S101CDSI_branch_name + &quot;] var_S101CDSI_object_name[&quot; + var_S101CDSI_object_name + &quot;] &quot; +&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;var_S101CDSI_asOfDate[&quot; + var_S101CDSI_asOfDate + &quot;] &quot; +&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;var_S101CDSI_key_names[&quot; + var_S101CDSI_key_names + &quot;] var_S101CDSI_key_values[&quot; + var_S101CDSI_key_values + &quot;] &quot; +&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;var_S101CDSI_overwrite_exists[&quot; + var_S101CDSI_overwrite_exists + &quot;] var_S101CDSI_create_adj_table[&quot; + var_S101CDSI_create_adj_table + &quot;]&quot;);&#xa;&#xa;var S101CDSI_resolvedNames = " valueType="string"/>
                </object>
                <object type="ASLExpression:udfReference" version="1.0">
                    <property name="value" valueType="url">UserDefinedFunction["glbl_s91_resolveBranchObjectNames"{e665d99d-8d53-4952-b023-65d92c42ee4e}]</property>
                </object>
                <object type="ASLExpression:part" version="1.0">
                    <property name="expression" value="(var_S101CDSI_project_name, var_S101CDSI_branch_name, var_S101CDSI_object_name);&#xa;&#xa;var S101CDSI_project_name = S101CDSI_resolvedNames.get(&quot;projectName&quot;);&#xa;var S101CDSI_branch_name = S101CDSI_resolvedNames.get(&quot;branchName&quot;);&#xa;var S101CDSI_object_name = S101CDSI_resolvedNames.get(&quot;objectName&quot;);&#xa;&#xa;var S101CDSI_projectObjectID = ObjectID.createNameId(&quot;Project&quot;, null, S101CDSI_project_name);&#xa;&lt;if> axiomObjectManager.objectExists(S101CDSI_projectObjectID, axiomEnvironment)&#xa;&#x9;&lt;then>&#xa;&#x9;&#x9;var S101CDSI_branchObjectID = ObjectID.createNameId(&quot;Branch&quot;, null, S101CDSI_project_name + &quot;!&quot; + S101CDSI_branch_name);&#xa;&#x9;&#x9;&lt;if> axiomObjectManager.objectExists(S101CDSI_branchObjectID, axiomEnvironment)&#xa;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_asOfDate = null;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;if> var_S101CDSI_asOfDate != null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> var_S101CDSI_asOfDate instanceof &quot;java.util.Date&quot;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_asOfDate = var_S101CDSI_asOfDate.clone();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> NOT var_S101CDSI_asOfDate.trim().isEmpty()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;try>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_asOfDate = new(&quot;java.text.SimpleDateFormat&quot;, &quot;dd-MM-yyyy HH:mm:ss&quot;).parse(var_S101CDSI_asOfDate.trim());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;catch> var S101CDSI_ex &lt;/catch>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: Incorrect asOfDate format for SimpleDateFormat &quot; + var_S101CDSI_asOfDate + &quot;. Should be 'dd-MM-yyyy HH:mm:ss'&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_asOfDate = null;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/try>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> null == S101CDSI_asOfDate&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;try>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_asOfDate = date(var_S101CDSI_asOfDate.trim());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;catch> var S101CDSI_ex &lt;/catch>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;warningMessage(&quot;#!#!#! S101CDSI: Incorrect asOfDate format &quot; + var_S101CDSI_asOfDate + &quot;. Should be 'dd-MM-yyyy HH:mm:ss'&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;error(&quot;#!#!#! S101CDSI: Incorrect asOfDate format '&quot; + var_S101CDSI_asOfDate + &quot;'. Should be 'dd-MM-yyyy HH:mm:ss'&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/try>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_inKeysMap = Map();&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_keyNameList = var_S101CDSI_key_names.split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_key_values = if(var_S101CDSI_key_values.startsWith(&quot;,&quot;), &quot;%%&quot; + var_S101CDSI_key_values, var_S101CDSI_key_values);&#xa;&#x9;&#x9;&#x9;&#x9;S101CDSI_key_values = if(S101CDSI_key_values.endsWith(&quot;,&quot;), S101CDSI_key_values + &quot;%%&quot;, S101CDSI_key_values);&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_keyValueList = S101CDSI_key_values.split(&quot;,&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;for> var S101CDSI_keyNameList_CNT = 0 &lt;comma/> S101CDSI_keyNameList_CNT &amp;lt; S101CDSI_keyNameList.size() &lt;comma/> S101CDSI_keyNameList_CNT++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_keyValueList_Row = S101CDSI_keyValueList.get(S101CDSI_keyNameList_CNT).trim();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_inKeysMap.put(S101CDSI_keyNameList.get(S101CDSI_keyNameList_CNT).trim(), if(S101CDSI_keyValueList_Row.isEmpty() OR &quot;%%&quot;.equals(S101CDSI_keyValueList_Row), null, S101CDSI_keyValueList_Row));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_branchID = axiomObjectManager.locate(S101CDSI_branchObjectID, axiomEnvironment).getProperty(&quot;objectId&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_dataSourceTable = ArrayList();&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_allDataSourceTable = axiomObjectManager.listObjectsOfType(&quot;DataSource&quot;, S101CDSI_branchID, axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: S101CDSI_allDataSourceTable[&quot; + S101CDSI_allDataSourceTable.size() + &quot;]&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;var S101CDSI_dataSourceObject;&#xa;&#x9;&#x9;&#x9;&#x9;&lt;case> &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_object_name == null OR S101CDSI_object_name.trim().equals(&quot;&quot;) OR S101CDSI_object_name.trim().equals(&quot;*&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var S101CDSI_allDataSourceTable_Cnt = 0 &lt;comma/> S101CDSI_allDataSourceTable_Cnt &amp;lt; S101CDSI_allDataSourceTable.size() &lt;comma/> S101CDSI_allDataSourceTable_Cnt++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_dataSourceObject = axiomObjectManager.locate(ObjectID.createDbId(S101CDSI_allDataSourceTable.get(S101CDSI_allDataSourceTable_Cnt)), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> NOT S101CDSI_dataSourceObject.getOptionalBoolean(&quot;isGenerated&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_dataSourceTable.add(S101CDSI_allDataSourceTable.get(S101CDSI_allDataSourceTable_Cnt));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_object_name.contains(&quot;[*]&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var S101CDSI_allDataSourceTable_Cnt = 0 &lt;comma/> S101CDSI_allDataSourceTable_Cnt &amp;lt; S101CDSI_allDataSourceTable.size() &lt;comma/> S101CDSI_allDataSourceTable_Cnt++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_dataSourceObject = axiomObjectManager.locate(ObjectID.createDbId(S101CDSI_allDataSourceTable.get(S101CDSI_allDataSourceTable_Cnt)), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> S101CDSI_dataSourceObject.getName().startsWith(S101CDSI_object_name.substring(0, S101CDSI_object_name.indexOf(&quot;[&quot;)))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_dataSourceTable.add(S101CDSI_allDataSourceTable.get(S101CDSI_allDataSourceTable_Cnt));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: S101CDSI_object_name[&quot; + S101CDSI_object_name + &quot;]&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_singleDataSourceID = ObjectID.createNameId(&quot;DataSource&quot;, S101CDSI_branchID, S101CDSI_object_name);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> axiomObjectManager.objectExists(S101CDSI_singleDataSourceID, axiomEnvironment)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_dataSourceTable.add(axiomObjectManager.locate(S101CDSI_singleDataSourceID, axiomEnvironment).createDbID());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;warningMessage(&quot;#!#!#! S101CDSI: DataSource &quot; + S101CDSI_project_name + &quot;!&quot; + S101CDSI_branch_name + &quot;:&quot; + S101CDSI_object_name + &quot; doesn't exist.&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;error(&quot;#!#!#! S101CDSI: DataSource &quot; + S101CDSI_project_name + &quot;!&quot; + S101CDSI_branch_name + &quot;:&quot; + S101CDSI_object_name + &quot; doesn't exist.&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/case>&#xa;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: S101CDSI_dataSourceTable[&quot; + S101CDSI_dataSourceTable.size() + &quot;]&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&lt;for> var S101CDSI_dataSourceTable_CNT = 0 &lt;comma/> S101CDSI_dataSourceTable_CNT &amp;lt; S101CDSI_dataSourceTable.size() &lt;comma/> S101CDSI_dataSourceTable_CNT++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_dataSourceObject = axiomObjectManager.locate(ObjectID.createDbId(S101CDSI_dataSourceTable.get(S101CDSI_dataSourceTable_CNT)), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_storageType = S101CDSI_dataSourceObject.getProperty(&quot;storageType&quot;);&#xa;&lt;!-- Should be removed in v10 Start&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_newDataSourceInstance = axiomObjectManager.create(&quot;DataSourceInstanceSpec&quot;);&#xa;Should be removed in v10 Finish -->&#xa;&lt;!-- For v10 Start -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_InstanceManager = ModuleRouter.getImpl(class(&quot;com.axiomsl.datasource.api.DataSourceInstanceService_1&quot;), S101CDSI_dataSourceObject.createDbID(), axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_newDataSourceInstance = S101CDSI_InstanceManager.createDataSourceInstanceSpec(&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ModuleRouter.getImpl(class(&quot;com.axiomsl.framework.api.object_framework.RouteToObjectService_1&quot;), axiomEnvironment).createEmptyRoute(),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ObjectID.createDbId(S101CDSI_dataSourceObject.createDbID()),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;axiomEnvironment&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);&#xa;&lt;!-- For v10 Finish -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_newInstanceName = S101CDSI_dataSourceObject.getName();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_newInstanceId = &quot;&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_alreadyExistsInstance = false;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_oldIntanceTable = axiomObjectManager.locate(ObjectID.createNameId(&quot;DataSourceInstances&quot;, S101CDSI_branchID, S101CDSI_dataSourceObject.getName()), axiomEnvironment).getTable(&quot;instances&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> NOT S101CDSI_storageType.equals(&quot;PERMANENT&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> S101CDSI_asOfDate == null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;warningMessage(&quot;#!#!#! S101CDSI: DataSource[&quot; + S101CDSI_dataSourceObject + &quot;] skipped because var_S101CDSI_asOfDate was not set&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceName = S101CDSI_newInstanceName + &quot;_&quot; + formatDate(S101CDSI_asOfDate, &quot;yyyyMMddHHmmss&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newDataSourceInstance.setProperty(&quot;instanceDate&quot;, S101CDSI_asOfDate);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_dataSourceKeyTable = S101CDSI_dataSourceObject.getTable(&quot;instanceKeys&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_newInstaKeyTable = S101CDSI_newDataSourceInstance.createTablePropertyValue();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var S101CDSI_dataSourceKeyTable_CNT = 0 &lt;comma/> S101CDSI_dataSourceKeyTable_CNT &amp;lt; S101CDSI_dataSourceKeyTable.size() &lt;comma/> S101CDSI_dataSourceKeyTable_CNT++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_newInstanceKeyValue = S101CDSI_newInstaKeyTable.addRow(&quot;InstanceKeyValue&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_keyObject = if(S101CDSI_storageType.startsWith(&quot;CONTINUOUS&quot;), S101CDSI_dataSourceKeyTable.get(S101CDSI_dataSourceKeyTable_CNT).getReference(&quot;value&quot;).getTargetObject(), S101CDSI_dataSourceKeyTable.get(S101CDSI_dataSourceKeyTable_CNT));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceKeyValue.setProperty(&quot;name&quot;, S101CDSI_keyObject.getProperty(&quot;name&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceKeyValue.setProperty(&quot;keyValueType&quot;, S101CDSI_keyObject.getProperty(&quot;type&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> S101CDSI_inKeysMap.get(S101CDSI_keyObject.getProperty(&quot;name&quot;)) == null&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceKeyValue.setProperty(&quot;keyValue&quot;, &quot;&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceName = S101CDSI_newInstanceName + &quot;_&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> &quot;INTEGER&quot;.equals(S101CDSI_keyObject.getProperty(&quot;type&quot;)) OR &quot;FLOAT&quot;.equals(S101CDSI_keyObject.getProperty(&quot;type&quot;))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceKeyValue.setProperty(&quot;keyValue&quot;, &quot;0&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceName = S101CDSI_newInstanceName + &quot;0&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> &quot;DATE&quot;.equals(S101CDSI_keyObject.getProperty(&quot;type&quot;))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceKeyValue.setProperty(&quot;keyValue&quot;, &quot;1990-01-01 00:00:00&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceName = S101CDSI_newInstanceName + &quot;19900101000000&quot;;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceKeyValue.setProperty(&quot;keyValue&quot;, S101CDSI_inKeysMap.get(S101CDSI_keyObject.getProperty(&quot;name&quot;)));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newInstanceName = S101CDSI_newInstanceName + &quot;_&quot; + S101CDSI_inKeysMap.get(S101CDSI_keyObject.getProperty(&quot;name&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_timeTagToCheck = CreateTimeTag(S101CDSI_asOfDate);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_timeTagToCheckKeys = S101CDSI_newInstaKeyTable.cloneTo(S101CDSI_timeTagToCheck, axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_timeTagToCheck.setProperty(&quot;instanceKeyValues&quot;, S101CDSI_timeTagToCheckKeys);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_alreadyExistsInstance = sourceInstanceExists(S101CDSI_timeTagToCheck, S101CDSI_project_name + &quot;!&quot; + S101CDSI_branch_name + &quot;:&quot; + S101CDSI_dataSourceObject.getName());&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newDataSourceInstance.setProperty(&quot;instanceKeyValues&quot;, S101CDSI_newInstaKeyTable);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_alreadyExistsInstance = S101CDSI_oldIntanceTable.size() &amp;gt; 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> (var_S101CDSI_create_adj_table.toLowerCase().equals(&quot;y&quot;) OR var_S101CDSI_create_adj_table.toLowerCase().equals(&quot;yes&quot;)) AND NOT S101CDSI_dataSourceObject.propertyIsSet(&quot;adjustmentsTable&quot;)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&lt;!-- Should be removed in v10 Start&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_remoteProxy = class(&quot;axiomsl.proxy.RemoteProxyImpl&quot;).getInstance();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_remoteProxy.getServerProxy().createOrRebuildAdjustmentTable(S101CDSI_dataSourceObject.createObjectID(), true, S101CDSI_remoteProxy.getAxiomEnvironment());&#xa;Should be removed in v10 Finish -->&#xa;&lt;!-- For v10 Start -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_instanceService = DataSourceInstanceService_1(S101CDSI_dataSourceObject.createDbID());&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_instanceService.createOrRebuildAdjustmentTable(S101CDSI_dataSourceObject.createObjectID(), true, axiomEnvironment);&#xa;&lt;!-- For v10 Finish -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: DataSource[&quot; + S101CDSI_dataSourceObject + &quot;] sourceInstanceExists[&quot; + S101CDSI_alreadyExistsInstance + &quot;]&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> S101CDSI_alreadyExistsInstance&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: DataSource &quot; + S101CDSI_dataSourceObject + &quot; already has instance with selected parameters&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> NOT (var_S101CDSI_overwrite_exists.equalsIgnoreCase(&quot;Y&quot;) OR var_S101CDSI_overwrite_exists.equalsIgnoreCase(&quot;YES&quot;))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: DataSource &quot; + S101CDSI_dataSourceObject + &quot; instance creation skiped&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: DataSource &quot; + S101CDSI_dataSourceObject + &quot; instance recreated&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_dataSourceObjectBranchId = S101CDSI_dataSourceObject.getProperty(&quot;branchId&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_dataSourceObjectNameOrId = S101CDSI_dataSourceObject.createObjectID().getNameOrId();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_routeToInstance = ModuleRouter.getImpl(class(&quot;com.axiomsl.framework.api.object_framework.RouteToObjectService_1&quot;), axiomEnvironment).createIdRouteFromObjectId(S101CDSI_dataSourceObjectBranchId, S101CDSI_dataSourceObjectNameOrId, axiomEnvironment);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newDataSourceInstance.setProperty(&quot;name&quot;, S101CDSI_newInstanceName);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newDataSourceInstance.setProperty(&quot;branchId&quot;, S101CDSI_dataSourceObject.getProperty(&quot;branchId&quot;));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newDataSourceInstance.setProperty(&quot;objectId&quot;, S101CDSI_routeToInstance.getIdRoute() + if(&quot;&quot;.equals(S101CDSI_newInstanceId), &quot;InstanceSpec&quot;, S101CDSI_newInstanceId));&#xa;&lt;!-- Should be removed in v10 Start&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newDataSourceInstance.setProperty(&quot;underlyingObject&quot;, new(&quot;com.axiomsl.framework.api.object_framework.ObjectReference_1&quot;, S101CDSI_newDataSourceInstance, ModuleRouter.getImpl(class(&quot;com.axiomsl.framework.api.object_framework.RouteToObjectService_1&quot;), axiomEnvironment).createEmptyRoute(), S101CDSI_dataSourceObject.createObjectID()));&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_newDataSourceInstance.setObjectManager(axiomObjectManager);&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_InstanceManager = axiomObjectManager.getInstanceManager();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_isFinalizeNeed = 100;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var S101CDSI_IMMethods = S101CDSI_InstanceManager.getClass().getDeclaredMethods();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;for> var S101CDSI_IMMethods_Cnt = 0 &lt;comma/> S101CDSI_IMMethods_Cnt &amp;lt; S101CDSI_IMMethods.size() &lt;comma/> S101CDSI_IMMethods_Cnt++&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> &quot;createSourceInstance&quot;.equals(S101CDSI_IMMethods.get(S101CDSI_IMMethods_Cnt).getName())&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> S101CDSI_isFinalizeNeed &amp;gt; S101CDSI_IMMethods.get(S101CDSI_IMMethods_Cnt).getGenericParameterTypes().size()&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_isFinalizeNeed = S101CDSI_IMMethods.get(S101CDSI_IMMethods_Cnt).getGenericParameterTypes().size();&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trace(&quot;#!#!#! S101CDSI: S101CDSI_isFinalizeNeed[&quot; + S101CDSI_isFinalizeNeed + &quot;]&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;if> S101CDSI_isFinalizeNeed == 3&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_InstanceManager.createSourceInstance(S101CDSI_newDataSourceInstance, true, axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_InstanceManager.createSourceInstance(S101CDSI_newDataSourceInstance, axiomEnvironment);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/if>&#xa;Should be removed in v10 Finish -->&#xa;&lt;!-- For v10 Start -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S101CDSI_InstanceManager.createAndFinalizeSourceInstance(S101CDSI_newDataSourceInstance, axiomEnvironment);&#xa;&lt;!-- For v10 Finish -->&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/do>&#xa;&#x9;&#x9;&#x9;&#x9;&lt;/for>&#xa;&#x9;&#x9;&#x9;&lt;/then>&#xa;&#x9;&#x9;&#x9;&lt;else>&#xa;&#x9;&#x9;&#x9;&#x9;warningMessage(&quot;#!#!#! S101CDSI: Branch with name &quot; + S101CDSI_project_name + &quot;!&quot; + S101CDSI_branch_name + &quot; doesn't exist.&quot;);&#xa;&#x9;&#x9;&#x9;&#x9;error(&quot;#!#!#! S101CDSI: Branch with name &quot; + S101CDSI_project_name + &quot;!&quot; + S101CDSI_branch_name + &quot; doesn't exist.&quot;);&#xa;&#x9;&#x9;&#x9;&lt;/else>&#xa;&#x9;&#x9;&lt;/if>&#xa;&#x9;&lt;/then>&#xa;&#x9;&lt;else>&#xa;&#x9;&#x9;warningMessage(&quot;#!#!#! S101CDSI: Project with name &quot; + S101CDSI_project_name + &quot; doesn't exist.&quot;);&#xa;&#x9;&#x9;error(&quot;#!#!#! S101CDSI: Project with name &quot; + S101CDSI_project_name + &quot; doesn't exist.&quot;);&#xa;&#x9;&lt;/else>&#xa;&lt;/if>&#xa;trace(&quot;#!#!#! wfe_s101_createDataSourceInstance: Finished&quot;);" valueType="string"/>
                </object>
            </property>
        </object>
    </property>
</object>